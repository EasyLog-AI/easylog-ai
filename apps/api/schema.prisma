generator client {
    provider  = "prisma-client-py"
    interface = "asyncio"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum annotation_type {
    url_citation
}

enum image_detail {
    auto
    low
    high
}

enum message_content_type {
    text
    image
    file
    tool_use
    tool_result
}

enum message_role {
    developer
    system
    assistant
    user
    tool
}

enum widget_type {
    text
    image
    image_url
    chart
    multiple_choice
}

enum health_data_point_type {
    steps
}

enum health_platform {
    apple_health
    google_fit
}

enum recording_method {
    AUTOMATIC
    MANUAL
    ACTIVE
    UNKNOWN
}

enum health_data_unit {
    COUNT
}

model health_data_points {
    id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    created_at DateTime @default(now())
    updated_at DateTime @default(now()) @updatedAt

    user_id String @db.Uuid
    user    users  @relation(fields: [user_id], references: [id], onDelete: Cascade)

    type      health_data_point_type
    value     Int
    unit      health_data_unit
    date_from DateTime
    date_to   DateTime

    // Source information
    source_uuid      String          @unique
    health_platform  health_platform
    source_device_id String?
    source_id        String? // e.g. com.apple.Health
    source_name      String? // e.g. Apple Health

    @@map("health_data_points")
}

model users {
    id          String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    external_id String   @unique
    created_at  DateTime @default(now())
    updated_at  DateTime @default(now()) @updatedAt

    health_data_points health_data_points[]

    @@map("users")
}

model threads {
    id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    external_id String?    @unique
    created_at  DateTime   @default(now())
    updated_at  DateTime   @default(now()) @updatedAt
    metadata    Json       @default("{}") @db.JsonB
    messages    messages[]

    @@map("threads")
}

model messages {
    id          String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    thread      threads            @relation(fields: [thread_id], references: [id], onDelete: Cascade)
    thread_id   String             @db.Uuid
    role        message_role       @default(user)
    name        String?
    tool_use_id String?
    refusal     String?
    contents    message_contents[]
    agent_class String
    created_at  DateTime           @default(now())
    updated_at  DateTime           @default(now()) @updatedAt

    @@map("messages")
}

model message_contents {
    id          String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    message     messages             @relation(fields: [message_id], references: [id], onDelete: Cascade)
    message_id  String               @db.Uuid
    type        message_content_type @default(text)
    image_url   String?
    file_data   Bytes?
    file_name   String?
    text        String?
    widget_type widget_type?
    tool_use_id String?
    tool_name   String?
    tool_input  Json?                @db.JsonB
    tool_output String?
    created_at  DateTime             @default(now())
    updated_at  DateTime             @default(now()) @updatedAt

    @@map("message_contents")
}

model documents {
    id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    created_at  DateTime @default(now())
    updated_at  DateTime @default(now()) @updatedAt
    file_name   String
    path        String
    content     Json     @db.JsonB
    summary     String
    subject     String
    weaviate_id String?

    @@map("documents")
}
