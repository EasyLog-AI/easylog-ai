/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API
 * Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PaginationLinks } from './PaginationLinks';
import {
    PaginationLinksFromJSON,
    PaginationLinksFromJSONTyped,
    PaginationLinksToJSON,
    PaginationLinksToJSONTyped,
} from './PaginationLinks';
import type { Project } from './Project';
import {
    ProjectFromJSON,
    ProjectFromJSONTyped,
    ProjectToJSON,
    ProjectToJSONTyped,
} from './Project';
import type { PaginationMeta } from './PaginationMeta';
import {
    PaginationMetaFromJSON,
    PaginationMetaFromJSONTyped,
    PaginationMetaToJSON,
    PaginationMetaToJSONTyped,
} from './PaginationMeta';

/**
 * 
 * @export
 * @interface ProjectCollection
 */
export interface ProjectCollection {
    /**
     * 
     * @type {PaginationLinks}
     * @memberof ProjectCollection
     */
    links: PaginationLinks;
    /**
     * 
     * @type {PaginationMeta}
     * @memberof ProjectCollection
     */
    meta: PaginationMeta;
    /**
     * 
     * @type {Array<Project>}
     * @memberof ProjectCollection
     */
    data: Array<Project>;
}

/**
 * Check if a given object implements the ProjectCollection interface.
 */
export function instanceOfProjectCollection(value: object): value is ProjectCollection {
    if (!('links' in value) || value['links'] === undefined) return false;
    if (!('meta' in value) || value['meta'] === undefined) return false;
    if (!('data' in value) || value['data'] === undefined) return false;
    return true;
}

export function ProjectCollectionFromJSON(json: any): ProjectCollection {
    return ProjectCollectionFromJSONTyped(json, false);
}

export function ProjectCollectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectCollection {
    if (json == null) {
        return json;
    }
    return {
        
        'links': PaginationLinksFromJSON(json['links']),
        'meta': PaginationMetaFromJSON(json['meta']),
        'data': ((json['data'] as Array<any>).map(ProjectFromJSON)),
    };
}

export function ProjectCollectionToJSON(json: any): ProjectCollection {
    return ProjectCollectionToJSONTyped(json, false);
}

export function ProjectCollectionToJSONTyped(value?: ProjectCollection | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'links': PaginationLinksToJSON(value['links']),
        'meta': PaginationMetaToJSON(value['meta']),
        'data': ((value['data'] as Array<any>).map(ProjectToJSON)),
    };
}

