/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import { mapValues } from '../runtime';
import type { FollowUpCategory } from './FollowUpCategory';
import {
  FollowUpCategoryFromJSON,
  FollowUpCategoryFromJSONTyped,
  FollowUpCategoryToJSON,
  FollowUpCategoryToJSONTyped
} from './FollowUpCategory';

/**
 * @export
 * @interface FollowUp
 */
export interface FollowUp {
  /**
   * @memberof FollowUp
   * @type {number}
   */
  id?: number;
  /**
   * @memberof FollowUp
   * @type {string}
   */
  name?: string;
  /**
   * @memberof FollowUp
   * @type {string}
   */
  slug?: string;
  /**
   * @memberof FollowUp
   * @type {string}
   */
  description?: string | null;
  /**
   * @memberof FollowUp
   * @type {string}
   */
  icon?: string | null;
  /**
   * @memberof FollowUp
   * @type {number}
   */
  followUpCategoryId?: number | null;
  /**
   * @memberof FollowUp
   * @type {FollowUpCategory}
   */
  category?: FollowUpCategory;
  /**
   * @memberof FollowUp
   * @type {object}
   */
  scheme?: object | null;
  /**
   * @memberof FollowUp
   * @type {boolean}
   */
  canUseJsonTable?: boolean | null;
  /**
   * @memberof FollowUp
   * @type {Date}
   */
  createdAt?: Date | null;
  /**
   * @memberof FollowUp
   * @type {Date}
   */
  updatedAt?: Date | null;
  /**
   * @memberof FollowUp
   * @type {number}
   */
  entriesCount?: number | null;
}

/** Check if a given object implements the FollowUp interface. */
export function instanceOfFollowUp(value: object): value is FollowUp {
  return true;
}

export function FollowUpFromJSON(json: any): FollowUp {
  return FollowUpFromJSONTyped(json, false);
}

export function FollowUpFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): FollowUp {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'] == null ? undefined : json['id'],
    name: json['name'] == null ? undefined : json['name'],
    slug: json['slug'] == null ? undefined : json['slug'],
    description: json['description'] == null ? undefined : json['description'],
    icon: json['icon'] == null ? undefined : json['icon'],
    followUpCategoryId:
      json['follow_up_category_id'] == null
        ? undefined
        : json['follow_up_category_id'],
    category:
      json['category'] == null
        ? undefined
        : FollowUpCategoryFromJSON(json['category']),
    scheme: json['scheme'] == null ? undefined : json['scheme'],
    canUseJsonTable:
      json['can_use_json_table'] == null
        ? undefined
        : json['can_use_json_table'],
    createdAt:
      json['created_at'] == null ? undefined : new Date(json['created_at']),
    updatedAt:
      json['updated_at'] == null ? undefined : new Date(json['updated_at']),
    entriesCount:
      json['entries_count'] == null ? undefined : json['entries_count']
  };
}

export function FollowUpToJSON(json: any): FollowUp {
  return FollowUpToJSONTyped(json, false);
}

export function FollowUpToJSONTyped(
  value?: FollowUp | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    name: value['name'],
    slug: value['slug'],
    description: value['description'],
    icon: value['icon'],
    follow_up_category_id: value['followUpCategoryId'],
    category: FollowUpCategoryToJSON(value['category']),
    scheme: value['scheme'],
    can_use_json_table: value['canUseJsonTable'],
    created_at:
      value['createdAt'] == null
        ? undefined
        : (value['createdAt'] as any).toISOString(),
    updated_at:
      value['updatedAt'] == null
        ? undefined
        : (value['updatedAt'] as any).toISOString(),
    entries_count: value['entriesCount']
  };
}
