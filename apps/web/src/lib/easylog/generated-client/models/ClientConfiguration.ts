/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import { mapValues } from '../runtime';
import type { ClientConfigurationCan } from './ClientConfigurationCan';
import {
  ClientConfigurationCanFromJSON,
  ClientConfigurationCanFromJSONTyped,
  ClientConfigurationCanToJSON,
  ClientConfigurationCanToJSONTyped
} from './ClientConfigurationCan';
import type { ClientConfigurationFiltersInner } from './ClientConfigurationFiltersInner';
import {
  ClientConfigurationFiltersInnerFromJSON,
  ClientConfigurationFiltersInnerFromJSONTyped,
  ClientConfigurationFiltersInnerToJSON,
  ClientConfigurationFiltersInnerToJSONTyped
} from './ClientConfigurationFiltersInner';

/**
 * @export
 * @interface ClientConfiguration
 */
export interface ClientConfiguration {
  /**
   * Default time period configuration
   *
   * @memberof ClientConfiguration
   * @type {{ [key: string]: any }}
   */
  defaultTimePeriod?: { [key: string]: any };
  /**
   * Available planning filters
   *
   * @memberof ClientConfiguration
   * @type {ClientConfigurationFiltersInner[]}
   */
  filters?: Array<ClientConfigurationFiltersInner>;
  /**
   * @memberof ClientConfiguration
   * @type {ClientConfigurationCan}
   */
  can?: ClientConfigurationCan;
  /**
   * Planning configuration
   *
   * @memberof ClientConfiguration
   * @type {{ [key: string]: any }}
   */
  planning?: { [key: string]: any };
}

/** Check if a given object implements the ClientConfiguration interface. */
export function instanceOfClientConfiguration(
  value: object
): value is ClientConfiguration {
  return true;
}

export function ClientConfigurationFromJSON(json: any): ClientConfiguration {
  return ClientConfigurationFromJSONTyped(json, false);
}

export function ClientConfigurationFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): ClientConfiguration {
  if (json == null) {
    return json;
  }
  return {
    defaultTimePeriod:
      json['defaultTimePeriod'] == null ? undefined : json['defaultTimePeriod'],
    filters:
      json['filters'] == null
        ? undefined
        : (json['filters'] as Array<any>).map(
            ClientConfigurationFiltersInnerFromJSON
          ),
    can:
      json['can'] == null
        ? undefined
        : ClientConfigurationCanFromJSON(json['can']),
    planning: json['planning'] == null ? undefined : json['planning']
  };
}

export function ClientConfigurationToJSON(json: any): ClientConfiguration {
  return ClientConfigurationToJSONTyped(json, false);
}

export function ClientConfigurationToJSONTyped(
  value?: ClientConfiguration | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value;
  }

  return {
    defaultTimePeriod: value['defaultTimePeriod'],
    filters:
      value['filters'] == null
        ? undefined
        : (value['filters'] as Array<any>).map(
            ClientConfigurationFiltersInnerToJSON
          ),
    can: ClientConfigurationCanToJSON(value['can']),
    planning: value['planning']
  };
}
