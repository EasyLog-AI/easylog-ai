/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import { mapValues } from '../runtime';
import type { AllocationType } from './AllocationType';
import {
  AllocationTypeFromJSON,
  AllocationTypeFromJSONTyped,
  AllocationTypeToJSON,
  AllocationTypeToJSONTyped
} from './AllocationType';

/**
 * @export
 * @interface Project
 */
export interface Project {
  [key: string]: any | any;
  /**
   * @memberof Project
   * @type {number}
   */
  id: number;
  /**
   * @memberof Project
   * @type {number}
   */
  datasourceId: number;
  /**
   * @memberof Project
   * @type {string}
   */
  label: string;
  /**
   * @memberof Project
   * @type {object}
   */
  extraData?: object | null;
  /**
   * @memberof Project
   * @type {AllocationType[]}
   */
  allocationTypes?: Array<AllocationType> | null;
  /**
   * @memberof Project
   * @type {object[]}
   */
  allocationsGrouped?: Array<object> | null;
  /**
   * @memberof Project
   * @type {Date}
   */
  createdAt?: Date | null;
  /**
   * @memberof Project
   * @type {Date}
   */
  updatedAt?: Date | null;
}

/** Check if a given object implements the Project interface. */
export function instanceOfProject(value: object): value is Project {
  if (!('id' in value) || value['id'] === undefined) return false;
  if (!('datasourceId' in value) || value['datasourceId'] === undefined)
    return false;
  if (!('label' in value) || value['label'] === undefined) return false;
  return true;
}

export function ProjectFromJSON(json: any): Project {
  return ProjectFromJSONTyped(json, false);
}

export function ProjectFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): Project {
  if (json == null) {
    return json;
  }
  return {
    ...json,
    id: json['id'],
    datasourceId: json['datasource_id'],
    label: json['label'],
    extraData: json['extra_data'] == null ? undefined : json['extra_data'],
    allocationTypes:
      json['allocation_types'] == null
        ? undefined
        : (json['allocation_types'] as Array<any>).map(AllocationTypeFromJSON),
    allocationsGrouped:
      json['allocations_grouped'] == null
        ? undefined
        : json['allocations_grouped'],
    createdAt:
      json['created_at'] == null ? undefined : new Date(json['created_at']),
    updatedAt:
      json['updated_at'] == null ? undefined : new Date(json['updated_at'])
  };
}

export function ProjectToJSON(json: any): Project {
  return ProjectToJSONTyped(json, false);
}

export function ProjectToJSONTyped(
  value?: Project | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value;
  }

  return {
    ...value,
    id: value['id'],
    datasource_id: value['datasourceId'],
    label: value['label'],
    extra_data: value['extraData'],
    allocation_types:
      value['allocationTypes'] == null
        ? undefined
        : (value['allocationTypes'] as Array<any>).map(AllocationTypeToJSON),
    allocations_grouped: value['allocationsGrouped'],
    created_at:
      value['createdAt'] == null
        ? value['createdAt']
        : value['createdAt'].toISOString(),
    updated_at:
      value['updatedAt'] == null
        ? value['updatedAt']
        : value['updatedAt'].toISOString()
  };
}
