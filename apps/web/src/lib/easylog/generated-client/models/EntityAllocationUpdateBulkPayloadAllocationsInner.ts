/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API
 * Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EntityAllocationUpdateBulkPayloadAllocationsInner
 */
export interface EntityAllocationUpdateBulkPayloadAllocationsInner {
    /**
     * The ID of the allocation to update
     * @type {number}
     * @memberof EntityAllocationUpdateBulkPayloadAllocationsInner
     */
    id: number;
    /**
     * Start date and time
     * @type {Date}
     * @memberof EntityAllocationUpdateBulkPayloadAllocationsInner
     */
    start?: Date;
    /**
     * End date and time
     * @type {Date}
     * @memberof EntityAllocationUpdateBulkPayloadAllocationsInner
     */
    end?: Date;
    /**
     * Allocation type
     * @type {string}
     * @memberof EntityAllocationUpdateBulkPayloadAllocationsInner
     */
    type?: string | null;
    /**
     * Comment
     * @type {string}
     * @memberof EntityAllocationUpdateBulkPayloadAllocationsInner
     */
    comment?: string | null;
    /**
     * Parent allocation ID
     * @type {number}
     * @memberof EntityAllocationUpdateBulkPayloadAllocationsInner
     */
    parentId?: number | null;
    /**
     * Additional allocation fields as key-value pairs. Values can be strings, numbers, booleans, objects, or arrays. Allowed fields depend on the resource configuration.
     * @type {object}
     * @memberof EntityAllocationUpdateBulkPayloadAllocationsInner
     */
    fields?: object | null;
}

/**
 * Check if a given object implements the EntityAllocationUpdateBulkPayloadAllocationsInner interface.
 */
export function instanceOfEntityAllocationUpdateBulkPayloadAllocationsInner(value: object): value is EntityAllocationUpdateBulkPayloadAllocationsInner {
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function EntityAllocationUpdateBulkPayloadAllocationsInnerFromJSON(json: any): EntityAllocationUpdateBulkPayloadAllocationsInner {
    return EntityAllocationUpdateBulkPayloadAllocationsInnerFromJSONTyped(json, false);
}

export function EntityAllocationUpdateBulkPayloadAllocationsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntityAllocationUpdateBulkPayloadAllocationsInner {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'start': json['start'] == null ? undefined : (new Date(json['start'])),
        'end': json['end'] == null ? undefined : (new Date(json['end'])),
        'type': json['type'] == null ? undefined : json['type'],
        'comment': json['comment'] == null ? undefined : json['comment'],
        'parentId': json['parent_id'] == null ? undefined : json['parent_id'],
        'fields': json['fields'] == null ? undefined : json['fields'],
    };
}

export function EntityAllocationUpdateBulkPayloadAllocationsInnerToJSON(json: any): EntityAllocationUpdateBulkPayloadAllocationsInner {
    return EntityAllocationUpdateBulkPayloadAllocationsInnerToJSONTyped(json, false);
}

export function EntityAllocationUpdateBulkPayloadAllocationsInnerToJSONTyped(value?: EntityAllocationUpdateBulkPayloadAllocationsInner | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'start': value['start'] == null ? value['start'] : value['start'].toISOString(),
        'end': value['end'] == null ? value['end'] : value['end'].toISOString(),
        'type': value['type'],
        'comment': value['comment'],
        'parent_id': value['parentId'],
        'fields': value['fields'],
    };
}

