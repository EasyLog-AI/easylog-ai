/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API
 * Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EntityAllocation
 */
export interface EntityAllocation {
    /**
     * 
     * @type {number}
     * @memberof EntityAllocation
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof EntityAllocation
     */
    projectId: number;
    /**
     * 
     * @type {number}
     * @memberof EntityAllocation
     */
    resourceId: number;
    /**
     * 
     * @type {string}
     * @memberof EntityAllocation
     */
    group?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EntityAllocation
     */
    type?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EntityAllocation
     */
    comment?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof EntityAllocation
     */
    start: Date;
    /**
     * 
     * @type {Date}
     * @memberof EntityAllocation
     */
    end: Date;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof EntityAllocation
     */
    fields?: { [key: string]: string; };
    /**
     * 
     * @type {number}
     * @memberof EntityAllocation
     */
    parentId?: number | null;
    /**
     * 
     * @type {Array<EntityAllocation>}
     * @memberof EntityAllocation
     */
    children?: Array<EntityAllocation> | null;
    /**
     * 
     * @type {Date}
     * @memberof EntityAllocation
     */
    createdAt?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof EntityAllocation
     */
    updatedAt?: Date | null;
}

/**
 * Check if a given object implements the EntityAllocation interface.
 */
export function instanceOfEntityAllocation(value: object): value is EntityAllocation {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('projectId' in value) || value['projectId'] === undefined) return false;
    if (!('resourceId' in value) || value['resourceId'] === undefined) return false;
    if (!('start' in value) || value['start'] === undefined) return false;
    if (!('end' in value) || value['end'] === undefined) return false;
    return true;
}

export function EntityAllocationFromJSON(json: any): EntityAllocation {
    return EntityAllocationFromJSONTyped(json, false);
}

export function EntityAllocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntityAllocation {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'projectId': json['project_id'],
        'resourceId': json['resource_id'],
        'group': json['group'] == null ? undefined : json['group'],
        'type': json['type'] == null ? undefined : json['type'],
        'comment': json['comment'] == null ? undefined : json['comment'],
        'start': (new Date(json['start'])),
        'end': (new Date(json['end'])),
        'fields': json['fields'] == null ? undefined : json['fields'],
        'parentId': json['parent_id'] == null ? undefined : json['parent_id'],
        'children': json['children'] == null ? undefined : ((json['children'] as Array<any>).map(EntityAllocationFromJSON)),
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
    };
}

export function EntityAllocationToJSON(json: any): EntityAllocation {
    return EntityAllocationToJSONTyped(json, false);
}

export function EntityAllocationToJSONTyped(value?: EntityAllocation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'project_id': value['projectId'],
        'resource_id': value['resourceId'],
        'group': value['group'],
        'type': value['type'],
        'comment': value['comment'],
        'start': ((value['start']).toISOString()),
        'end': ((value['end']).toISOString()),
        'fields': value['fields'],
        'parent_id': value['parentId'],
        'children': value['children'] == null ? undefined : ((value['children'] as Array<any>).map(EntityAllocationToJSON)),
        'created_at': value['createdAt'] == null ? undefined : ((value['createdAt'] as any).toISOString()),
        'updated_at': value['updatedAt'] == null ? undefined : ((value['updatedAt'] as any).toISOString()),
    };
}

