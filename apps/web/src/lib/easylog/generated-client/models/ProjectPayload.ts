/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Project creation/update payload
 *
 * @export
 * @interface ProjectPayload
 */
export interface ProjectPayload {
  /**
   * Project name
   *
   * @memberof ProjectPayload
   * @type {string}
   */
  name: string;
  /**
   * Project color code
   *
   * @memberof ProjectPayload
   * @type {string}
   */
  color: string;
  /**
   * Whether the project is visible in reports
   *
   * @memberof ProjectPayload
   * @type {boolean}
   */
  reportVisible: boolean;
  /**
   * Whether to exclude project in workday calculations
   *
   * @memberof ProjectPayload
   * @type {boolean}
   */
  excludeInWorkdays: boolean;
  /**
   * Project start date (not required for dateless projects)
   *
   * @memberof ProjectPayload
   * @type {Date}
   */
  start: Date;
  /**
   * Project end date (not required for dateless projects)
   *
   * @memberof ProjectPayload
   * @type {Date}
   */
  end: Date;
  /**
   * Additional fields (can contain strings, numbers, booleans, objects,
   * arrays). Keys must exist in extra_data_fields on the project datasource
   *
   * @memberof ProjectPayload
   * @type {object}
   */
  extraData?: object | null;
}

/** Check if a given object implements the ProjectPayload interface. */
export function instanceOfProjectPayload(
  value: object
): value is ProjectPayload {
  if (!('name' in value) || value['name'] === undefined) return false;
  if (!('color' in value) || value['color'] === undefined) return false;
  if (!('reportVisible' in value) || value['reportVisible'] === undefined)
    return false;
  if (
    !('excludeInWorkdays' in value) ||
    value['excludeInWorkdays'] === undefined
  )
    return false;
  if (!('start' in value) || value['start'] === undefined) return false;
  if (!('end' in value) || value['end'] === undefined) return false;
  return true;
}

export function ProjectPayloadFromJSON(json: any): ProjectPayload {
  return ProjectPayloadFromJSONTyped(json, false);
}

export function ProjectPayloadFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): ProjectPayload {
  if (json == null) {
    return json;
  }
  return {
    name: json['name'],
    color: json['color'],
    reportVisible: json['report_visible'],
    excludeInWorkdays: json['exclude_in_workdays'],
    start: new Date(json['start']),
    end: new Date(json['end']),
    extraData: json['extra_data'] == null ? undefined : json['extra_data']
  };
}

export function ProjectPayloadToJSON(json: any): ProjectPayload {
  return ProjectPayloadToJSONTyped(json, false);
}

export function ProjectPayloadToJSONTyped(
  value?: ProjectPayload | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value;
  }

  return {
    name: value['name'],
    color: value['color'],
    report_visible: value['reportVisible'],
    exclude_in_workdays: value['excludeInWorkdays'],
    start: value['start'].toISOString(),
    end: value['end'].toISOString(),
    extra_data: value['extraData']
  };
}
