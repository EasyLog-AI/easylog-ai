/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API
 * Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MediaDetailResourceDimensions } from './MediaDetailResourceDimensions';
import {
    MediaDetailResourceDimensionsFromJSON,
    MediaDetailResourceDimensionsFromJSONTyped,
    MediaDetailResourceDimensionsToJSON,
    MediaDetailResourceDimensionsToJSONTyped,
} from './MediaDetailResourceDimensions';
import type { MediaDetailResourceConversions } from './MediaDetailResourceConversions';
import {
    MediaDetailResourceConversionsFromJSON,
    MediaDetailResourceConversionsFromJSONTyped,
    MediaDetailResourceConversionsToJSON,
    MediaDetailResourceConversionsToJSONTyped,
} from './MediaDetailResourceConversions';

/**
 * Detailed media resource with presigned S3 URLs
 * @export
 * @interface MediaDetailResource
 */
export interface MediaDetailResource {
    /**
     * 
     * @type {number}
     * @memberof MediaDetailResource
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof MediaDetailResource
     */
    uuid?: string;
    /**
     * Display name
     * @type {string}
     * @memberof MediaDetailResource
     */
    name?: string;
    /**
     * Original filename
     * @type {string}
     * @memberof MediaDetailResource
     */
    fileName?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaDetailResource
     */
    mimeType?: string;
    /**
     * File size in bytes
     * @type {number}
     * @memberof MediaDetailResource
     */
    size?: number;
    /**
     * Presigned S3 URL for original file (expires in 1 hour)
     * @type {string}
     * @memberof MediaDetailResource
     */
    url?: string;
    /**
     * 
     * @type {MediaDetailResourceConversions}
     * @memberof MediaDetailResource
     */
    conversions?: MediaDetailResourceConversions;
    /**
     * 
     * @type {MediaDetailResourceDimensions}
     * @memberof MediaDetailResource
     */
    dimensions?: MediaDetailResourceDimensions;
    /**
     * When presigned URLs expire
     * @type {Date}
     * @memberof MediaDetailResource
     */
    expiresAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof MediaDetailResource
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof MediaDetailResource
     */
    updatedAt?: Date;
}

/**
 * Check if a given object implements the MediaDetailResource interface.
 */
export function instanceOfMediaDetailResource(value: object): value is MediaDetailResource {
    return true;
}

export function MediaDetailResourceFromJSON(json: any): MediaDetailResource {
    return MediaDetailResourceFromJSONTyped(json, false);
}

export function MediaDetailResourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaDetailResource {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
        'name': json['name'] == null ? undefined : json['name'],
        'fileName': json['file_name'] == null ? undefined : json['file_name'],
        'mimeType': json['mime_type'] == null ? undefined : json['mime_type'],
        'size': json['size'] == null ? undefined : json['size'],
        'url': json['url'] == null ? undefined : json['url'],
        'conversions': json['conversions'] == null ? undefined : MediaDetailResourceConversionsFromJSON(json['conversions']),
        'dimensions': json['dimensions'] == null ? undefined : MediaDetailResourceDimensionsFromJSON(json['dimensions']),
        'expiresAt': json['expires_at'] == null ? undefined : (new Date(json['expires_at'])),
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
    };
}

export function MediaDetailResourceToJSON(json: any): MediaDetailResource {
    return MediaDetailResourceToJSONTyped(json, false);
}

export function MediaDetailResourceToJSONTyped(value?: MediaDetailResource | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'uuid': value['uuid'],
        'name': value['name'],
        'file_name': value['fileName'],
        'mime_type': value['mimeType'],
        'size': value['size'],
        'url': value['url'],
        'conversions': MediaDetailResourceConversionsToJSON(value['conversions']),
        'dimensions': MediaDetailResourceDimensionsToJSON(value['dimensions']),
        'expires_at': value['expiresAt'] == null ? undefined : ((value['expiresAt']).toISOString()),
        'created_at': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updated_at': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
    };
}

