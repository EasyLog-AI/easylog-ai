/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API
 * Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MediaResourceOpenLabel } from './MediaResourceOpenLabel';
import {
    MediaResourceOpenLabelFromJSON,
    MediaResourceOpenLabelFromJSONTyped,
    MediaResourceOpenLabelToJSON,
    MediaResourceOpenLabelToJSONTyped,
} from './MediaResourceOpenLabel';

/**
 * 
 * @export
 * @interface MediaResource
 */
export interface MediaResource {
    /**
     * 
     * @type {number}
     * @memberof MediaResource
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof MediaResource
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaResource
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaResource
     */
    fileName?: string;
    /**
     * 
     * @type {MediaResourceOpenLabel}
     * @memberof MediaResource
     */
    openLabel?: MediaResourceOpenLabel;
    /**
     * 
     * @type {string}
     * @memberof MediaResource
     */
    mimeType?: string;
    /**
     * File size in bytes
     * @type {number}
     * @memberof MediaResource
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof MediaResource
     */
    path?: string;
    /**
     * 
     * @type {Date}
     * @memberof MediaResource
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof MediaResource
     */
    updatedAt?: Date;
}

/**
 * Check if a given object implements the MediaResource interface.
 */
export function instanceOfMediaResource(value: object): value is MediaResource {
    return true;
}

export function MediaResourceFromJSON(json: any): MediaResource {
    return MediaResourceFromJSONTyped(json, false);
}

export function MediaResourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaResource {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
        'name': json['name'] == null ? undefined : json['name'],
        'fileName': json['file_name'] == null ? undefined : json['file_name'],
        'openLabel': json['open_label'] == null ? undefined : MediaResourceOpenLabelFromJSON(json['open_label']),
        'mimeType': json['mime_type'] == null ? undefined : json['mime_type'],
        'size': json['size'] == null ? undefined : json['size'],
        'path': json['path'] == null ? undefined : json['path'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
    };
}

export function MediaResourceToJSON(json: any): MediaResource {
    return MediaResourceToJSONTyped(json, false);
}

export function MediaResourceToJSONTyped(value?: MediaResource | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'uuid': value['uuid'],
        'name': value['name'],
        'file_name': value['fileName'],
        'open_label': MediaResourceOpenLabelToJSON(value['openLabel']),
        'mime_type': value['mimeType'],
        'size': value['size'],
        'path': value['path'],
        'created_at': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updated_at': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
    };
}

