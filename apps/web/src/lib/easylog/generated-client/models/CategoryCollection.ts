/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API
 * Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CategoryCollectionLinks } from './CategoryCollectionLinks';
import {
    CategoryCollectionLinksFromJSON,
    CategoryCollectionLinksFromJSONTyped,
    CategoryCollectionLinksToJSON,
    CategoryCollectionLinksToJSONTyped,
} from './CategoryCollectionLinks';
import type { Category } from './Category';
import {
    CategoryFromJSON,
    CategoryFromJSONTyped,
    CategoryToJSON,
    CategoryToJSONTyped,
} from './Category';
import type { CategoryCollectionMeta } from './CategoryCollectionMeta';
import {
    CategoryCollectionMetaFromJSON,
    CategoryCollectionMetaFromJSONTyped,
    CategoryCollectionMetaToJSON,
    CategoryCollectionMetaToJSONTyped,
} from './CategoryCollectionMeta';

/**
 * Paginated collection of categories
 * @export
 * @interface CategoryCollection
 */
export interface CategoryCollection {
    /**
     * 
     * @type {Array<Category>}
     * @memberof CategoryCollection
     */
    data?: Array<Category>;
    /**
     * 
     * @type {CategoryCollectionLinks}
     * @memberof CategoryCollection
     */
    links?: CategoryCollectionLinks;
    /**
     * 
     * @type {CategoryCollectionMeta}
     * @memberof CategoryCollection
     */
    meta?: CategoryCollectionMeta;
}

/**
 * Check if a given object implements the CategoryCollection interface.
 */
export function instanceOfCategoryCollection(value: object): value is CategoryCollection {
    return true;
}

export function CategoryCollectionFromJSON(json: any): CategoryCollection {
    return CategoryCollectionFromJSONTyped(json, false);
}

export function CategoryCollectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): CategoryCollection {
    if (json == null) {
        return json;
    }
    return {
        
        'data': json['data'] == null ? undefined : ((json['data'] as Array<any>).map(CategoryFromJSON)),
        'links': json['links'] == null ? undefined : CategoryCollectionLinksFromJSON(json['links']),
        'meta': json['meta'] == null ? undefined : CategoryCollectionMetaFromJSON(json['meta']),
    };
}

export function CategoryCollectionToJSON(json: any): CategoryCollection {
    return CategoryCollectionToJSONTyped(json, false);
}

export function CategoryCollectionToJSONTyped(value?: CategoryCollection | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'data': value['data'] == null ? undefined : ((value['data'] as Array<any>).map(CategoryToJSON)),
        'links': CategoryCollectionLinksToJSON(value['links']),
        'meta': CategoryCollectionMetaToJSON(value['meta']),
    };
}

