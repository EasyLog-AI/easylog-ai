/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import { mapValues } from '../runtime';
import type { Entity } from './Entity';
import {
  EntityFromJSON,
  EntityFromJSONTyped,
  EntityToJSON,
  EntityToJSONTyped
} from './Entity';
import type { PaginationLinks } from './PaginationLinks';
import {
  PaginationLinksFromJSON,
  PaginationLinksFromJSONTyped,
  PaginationLinksToJSON,
  PaginationLinksToJSONTyped
} from './PaginationLinks';
import type { PaginationMeta } from './PaginationMeta';
import {
  PaginationMetaFromJSON,
  PaginationMetaFromJSONTyped,
  PaginationMetaToJSON,
  PaginationMetaToJSONTyped
} from './PaginationMeta';

/**
 * @export
 * @interface EntityCollection
 */
export interface EntityCollection {
  /**
   * @memberof EntityCollection
   * @type {PaginationLinks}
   */
  links: PaginationLinks;
  /**
   * @memberof EntityCollection
   * @type {PaginationMeta}
   */
  meta: PaginationMeta;
  /**
   * @memberof EntityCollection
   * @type {Entity[]}
   */
  data: Array<Entity>;
}

/** Check if a given object implements the EntityCollection interface. */
export function instanceOfEntityCollection(
  value: object
): value is EntityCollection {
  if (!('links' in value) || value['links'] === undefined) return false;
  if (!('meta' in value) || value['meta'] === undefined) return false;
  if (!('data' in value) || value['data'] === undefined) return false;
  return true;
}

export function EntityCollectionFromJSON(json: any): EntityCollection {
  return EntityCollectionFromJSONTyped(json, false);
}

export function EntityCollectionFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): EntityCollection {
  if (json == null) {
    return json;
  }
  return {
    links: PaginationLinksFromJSON(json['links']),
    meta: PaginationMetaFromJSON(json['meta']),
    data: (json['data'] as Array<any>).map(EntityFromJSON)
  };
}

export function EntityCollectionToJSON(json: any): EntityCollection {
  return EntityCollectionToJSONTyped(json, false);
}

export function EntityCollectionToJSONTyped(
  value?: EntityCollection | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value;
  }

  return {
    links: PaginationLinksToJSON(value['links']),
    meta: PaginationMetaToJSON(value['meta']),
    data: (value['data'] as Array<any>).map(EntityToJSON)
  };
}
