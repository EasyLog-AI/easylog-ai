/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API
 * Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface StoreFormInput
 */
export interface StoreFormInput {
    /**
     * 
     * @type {string}
     * @memberof StoreFormInput
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof StoreFormInput
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StoreFormInput
     */
    avatar?: string | null;
    /**
     * JSON string containing form schema
     * @type {string}
     * @memberof StoreFormInput
     */
    content: string;
    /**
     * 
     * @type {boolean}
     * @memberof StoreFormInput
     */
    forceSchemaValidity?: boolean | null;
}

/**
 * Check if a given object implements the StoreFormInput interface.
 */
export function instanceOfStoreFormInput(value: object): value is StoreFormInput {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    return true;
}

export function StoreFormInputFromJSON(json: any): StoreFormInput {
    return StoreFormInputFromJSONTyped(json, false);
}

export function StoreFormInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): StoreFormInput {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'avatar': json['avatar'] == null ? undefined : json['avatar'],
        'content': json['content'],
        'forceSchemaValidity': json['force_schema_validity'] == null ? undefined : json['force_schema_validity'],
    };
}

export function StoreFormInputToJSON(json: any): StoreFormInput {
    return StoreFormInputToJSONTyped(json, false);
}

export function StoreFormInputToJSONTyped(value?: StoreFormInput | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'description': value['description'],
        'avatar': value['avatar'],
        'content': value['content'],
        'force_schema_validity': value['forceSchemaValidity'],
    };
}

