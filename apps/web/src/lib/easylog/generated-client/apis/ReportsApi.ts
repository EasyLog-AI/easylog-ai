/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import * as runtime from '../runtime';

export interface GeneratePdfReportRequest {
  clientId: number;
  slug: string;
  data: string;
  as?: GeneratePdfReportAsEnum;
}

export class ReportsApi extends runtime.BaseAPI {
  /**
   * Generate and download a PDF report based on encrypted data parameters.
   * Supports exporting single or multiple Eloquent models as PDF. Add ?as=html
   * to view HTML instead of PDF. Generate PDF report
   */
  async generatePdfReportRaw(
    requestParameters: GeneratePdfReportRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Blob>> {
    if (requestParameters['clientId'] == null) {
      throw new runtime.RequiredError(
        'clientId',
        'Required parameter "clientId" was null or undefined when calling generatePdfReport().'
      );
    }

    if (requestParameters['slug'] == null) {
      throw new runtime.RequiredError(
        'slug',
        'Required parameter "slug" was null or undefined when calling generatePdfReport().'
      );
    }

    if (requestParameters['data'] == null) {
      throw new runtime.RequiredError(
        'data',
        'Required parameter "data" was null or undefined when calling generatePdfReport().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters['data'] != null) {
      queryParameters['data'] = requestParameters['data'];
    }

    if (requestParameters['as'] != null) {
      queryParameters['as'] = requestParameters['as'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    const response = await this.request(
      {
        path: `/v2/{clientId}/pdf/{slug}`
          .replace(
            `{${'clientId'}}`,
            encodeURIComponent(String(requestParameters['clientId']))
          )
          .replace(
            `{${'slug'}}`,
            encodeURIComponent(String(requestParameters['slug']))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.BlobApiResponse(response);
  }

  /**
   * Generate and download a PDF report based on encrypted data parameters.
   * Supports exporting single or multiple Eloquent models as PDF. Add ?as=html
   * to view HTML instead of PDF. Generate PDF report
   */
  async generatePdfReport(
    requestParameters: GeneratePdfReportRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Blob> {
    const response = await this.generatePdfReportRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}

/** @export */
export const GeneratePdfReportAsEnum = {
  Html: 'html'
} as const;
export type GeneratePdfReportAsEnum =
  (typeof GeneratePdfReportAsEnum)[keyof typeof GeneratePdfReportAsEnum];
