/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import * as runtime from '../runtime';
import type { ShowMedia200Response } from '../models/index';
import {
  ShowMedia200ResponseFromJSON,
  ShowMedia200ResponseToJSON
} from '../models/index';

export interface ShowMediaRequest {
  media: string;
  conversion?: string;
}

export class MediaApi extends runtime.BaseAPI {
  /**
   * Get media file details including presigned download URL (valid for 1 hour)
   * and available image conversions. Supports both numeric ID and UUID. Show
   * media file
   */
  async showMediaRaw(
    requestParameters: ShowMediaRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ShowMedia200Response>> {
    if (requestParameters['media'] == null) {
      throw new runtime.RequiredError(
        'media',
        'Required parameter "media" was null or undefined when calling showMedia().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters['conversion'] != null) {
      queryParameters['conversion'] = requestParameters['conversion'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    let urlPath = `/v2/media/{media}`;
    urlPath = urlPath.replace(
      `{${'media'}}`,
      encodeURIComponent(String(requestParameters['media']))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ShowMedia200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get media file details including presigned download URL (valid for 1 hour)
   * and available image conversions. Supports both numeric ID and UUID. Show
   * media file
   */
  async showMedia(
    requestParameters: ShowMediaRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ShowMedia200Response> {
    const response = await this.showMediaRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
