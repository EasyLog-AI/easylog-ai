/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import * as runtime from '../runtime';
import type {
  ListSubmissionMedia200Response,
  PersistSubmission201Response,
  PersistSubmissionRequest,
  PrepareSubmission200Response,
  PrepareSubmissionRequest,
  ShowSubmission200Response,
  SubmissionCollection,
  UpdateSubmissionInput,
  UploadSubmissionMedia201Response
} from '../models/index';
import {
  ListSubmissionMedia200ResponseFromJSON,
  ListSubmissionMedia200ResponseToJSON,
  PersistSubmission201ResponseFromJSON,
  PersistSubmission201ResponseToJSON,
  PersistSubmissionRequestFromJSON,
  PersistSubmissionRequestToJSON,
  PrepareSubmission200ResponseFromJSON,
  PrepareSubmission200ResponseToJSON,
  PrepareSubmissionRequestFromJSON,
  PrepareSubmissionRequestToJSON,
  ShowSubmission200ResponseFromJSON,
  ShowSubmission200ResponseToJSON,
  SubmissionCollectionFromJSON,
  SubmissionCollectionToJSON,
  UpdateSubmissionInputFromJSON,
  UpdateSubmissionInputToJSON,
  UploadSubmissionMedia201ResponseFromJSON,
  UploadSubmissionMedia201ResponseToJSON
} from '../models/index';

export interface DeleteSubmissionRequest {
  submission: number;
}

export interface ListSubmissionMediaRequest {
  submission: number;
}

export interface ListSubmissionsRequest {
  page?: number;
  projectFormId?: number;
  issuerId?: number;
  from?: Date;
  to?: Date;
  _with?: string;
  perPage?: number;
}

export interface PersistSubmissionOperationRequest {
  projectForm: number;
  persistSubmissionRequest: PersistSubmissionRequest;
}

export interface PrepareSubmissionOperationRequest {
  projectForm: number;
  prepareSubmissionRequest: PrepareSubmissionRequest;
}

export interface ShowSubmissionRequest {
  submission: number;
}

export interface UpdateSubmissionRequest {
  submission: number;
  updateSubmissionInput: UpdateSubmissionInput;
}

export interface UploadSubmissionMediaRequest {
  submission: number;
  file: Blob;
}

export class SubmissionsApi extends runtime.BaseAPI {
  /**
   * Delete a submission and all associated media. Users can only delete
   * submissions they created or if they have ViewAllSubmissions permission.
   * Delete submission
   */
  async deleteSubmissionRaw(
    requestParameters: DeleteSubmissionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['submission'] == null) {
      throw new runtime.RequiredError(
        'submission',
        'Required parameter "submission" was null or undefined when calling deleteSubmission().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    const response = await this.request(
      {
        path: `/v2/submissions/{submission}`.replace(
          `{${'submission'}}`,
          encodeURIComponent(String(requestParameters['submission']))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete a submission and all associated media. Users can only delete
   * submissions they created or if they have ViewAllSubmissions permission.
   * Delete submission
   */
  async deleteSubmission(
    requestParameters: DeleteSubmissionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteSubmissionRaw(requestParameters, initOverrides);
  }

  /** Get all media files attached to a submission. List media for a submission */
  async listSubmissionMediaRaw(
    requestParameters: ListSubmissionMediaRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ListSubmissionMedia200Response>> {
    if (requestParameters['submission'] == null) {
      throw new runtime.RequiredError(
        'submission',
        'Required parameter "submission" was null or undefined when calling listSubmissionMedia().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    const response = await this.request(
      {
        path: `/v2/submissions/{submission}/media`.replace(
          `{${'submission'}}`,
          encodeURIComponent(String(requestParameters['submission']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListSubmissionMedia200ResponseFromJSON(jsonValue)
    );
  }

  /** Get all media files attached to a submission. List media for a submission */
  async listSubmissionMedia(
    requestParameters: ListSubmissionMediaRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ListSubmissionMedia200Response> {
    const response = await this.listSubmissionMediaRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * List all submissions for the current user. Regular users only see their
   * own submissions. Users with ViewAllSubmissions permission can see all
   * submissions in their client and filter by issuer_id. List submissions
   * (paginated)
   */
  async listSubmissionsRaw(
    requestParameters: ListSubmissionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SubmissionCollection>> {
    const queryParameters: any = {};

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page'];
    }

    if (requestParameters['projectFormId'] != null) {
      queryParameters['project_form_id'] = requestParameters['projectFormId'];
    }

    if (requestParameters['issuerId'] != null) {
      queryParameters['issuer_id'] = requestParameters['issuerId'];
    }

    if (requestParameters['from'] != null) {
      queryParameters['from'] = (requestParameters['from'] as any)
        .toISOString()
        .substring(0, 10);
    }

    if (requestParameters['to'] != null) {
      queryParameters['to'] = (requestParameters['to'] as any)
        .toISOString()
        .substring(0, 10);
    }

    if (requestParameters['_with'] != null) {
      queryParameters['with'] = requestParameters['_with'];
    }

    if (requestParameters['perPage'] != null) {
      queryParameters['per_page'] = requestParameters['perPage'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    const response = await this.request(
      {
        path: `/v2/submissions`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SubmissionCollectionFromJSON(jsonValue)
    );
  }

  /**
   * List all submissions for the current user. Regular users only see their
   * own submissions. Users with ViewAllSubmissions permission can see all
   * submissions in their client and filter by issuer_id. List submissions
   * (paginated)
   */
  async listSubmissions(
    requestParameters: ListSubmissionsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SubmissionCollection> {
    const response = await this.listSubmissionsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Create and persist a new submission with form data and uploaded files.
   * Files should be uploaded first using the prepare endpoint. Supports both
   * POST and PUT methods for compatibility. Persist submission
   */
  async persistSubmissionRaw(
    requestParameters: PersistSubmissionOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PersistSubmission201Response>> {
    if (requestParameters['projectForm'] == null) {
      throw new runtime.RequiredError(
        'projectForm',
        'Required parameter "projectForm" was null or undefined when calling persistSubmission().'
      );
    }

    if (requestParameters['persistSubmissionRequest'] == null) {
      throw new runtime.RequiredError(
        'persistSubmissionRequest',
        'Required parameter "persistSubmissionRequest" was null or undefined when calling persistSubmission().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    const response = await this.request(
      {
        path: `/v2/submissions/{project_form}/persist`.replace(
          `{${'project_form'}}`,
          encodeURIComponent(String(requestParameters['projectForm']))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: PersistSubmissionRequestToJSON(
          requestParameters['persistSubmissionRequest']
        )
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PersistSubmission201ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Create and persist a new submission with form data and uploaded files.
   * Files should be uploaded first using the prepare endpoint. Supports both
   * POST and PUT methods for compatibility. Persist submission
   */
  async persistSubmission(
    requestParameters: PersistSubmissionOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PersistSubmission201Response> {
    const response = await this.persistSubmissionRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Prepare file uploads for a submission by generating pre-signed S3 URLs.
   * Call this before persisting the submission if files need to be uploaded.
   * Prepare submission file uploads
   */
  async prepareSubmissionRaw(
    requestParameters: PrepareSubmissionOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PrepareSubmission200Response>> {
    if (requestParameters['projectForm'] == null) {
      throw new runtime.RequiredError(
        'projectForm',
        'Required parameter "projectForm" was null or undefined when calling prepareSubmission().'
      );
    }

    if (requestParameters['prepareSubmissionRequest'] == null) {
      throw new runtime.RequiredError(
        'prepareSubmissionRequest',
        'Required parameter "prepareSubmissionRequest" was null or undefined when calling prepareSubmission().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    const response = await this.request(
      {
        path: `/v2/submissions/{project_form}/prepare`.replace(
          `{${'project_form'}}`,
          encodeURIComponent(String(requestParameters['projectForm']))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: PrepareSubmissionRequestToJSON(
          requestParameters['prepareSubmissionRequest']
        )
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PrepareSubmission200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Prepare file uploads for a submission by generating pre-signed S3 URLs.
   * Call this before persisting the submission if files need to be uploaded.
   * Prepare submission file uploads
   */
  async prepareSubmission(
    requestParameters: PrepareSubmissionOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PrepareSubmission200Response> {
    const response = await this.prepareSubmissionRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Display a specific submission. Users can only view submissions they
   * created or if they have ViewAllSubmissions permission. Show submission
   */
  async showSubmissionRaw(
    requestParameters: ShowSubmissionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ShowSubmission200Response>> {
    if (requestParameters['submission'] == null) {
      throw new runtime.RequiredError(
        'submission',
        'Required parameter "submission" was null or undefined when calling showSubmission().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    const response = await this.request(
      {
        path: `/v2/submissions/{submission}`.replace(
          `{${'submission'}}`,
          encodeURIComponent(String(requestParameters['submission']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ShowSubmission200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Display a specific submission. Users can only view submissions they
   * created or if they have ViewAllSubmissions permission. Show submission
   */
  async showSubmission(
    requestParameters: ShowSubmissionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ShowSubmission200Response> {
    const response = await this.showSubmissionRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Update submission data. Users can only update submissions they created or
   * if they have ViewAllSubmissions permission. Only the data field can be
   * updated. Update submission
   */
  async updateSubmissionRaw(
    requestParameters: UpdateSubmissionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ShowSubmission200Response>> {
    if (requestParameters['submission'] == null) {
      throw new runtime.RequiredError(
        'submission',
        'Required parameter "submission" was null or undefined when calling updateSubmission().'
      );
    }

    if (requestParameters['updateSubmissionInput'] == null) {
      throw new runtime.RequiredError(
        'updateSubmissionInput',
        'Required parameter "updateSubmissionInput" was null or undefined when calling updateSubmission().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    const response = await this.request(
      {
        path: `/v2/submissions/{submission}`.replace(
          `{${'submission'}}`,
          encodeURIComponent(String(requestParameters['submission']))
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateSubmissionInputToJSON(
          requestParameters['updateSubmissionInput']
        )
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ShowSubmission200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Update submission data. Users can only update submissions they created or
   * if they have ViewAllSubmissions permission. Only the data field can be
   * updated. Update submission
   */
  async updateSubmission(
    requestParameters: UpdateSubmissionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ShowSubmission200Response> {
    const response = await this.updateSubmissionRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Upload a file and attach it to a submission. Maximum file size: 10MB.
   * Upload media to a submission
   */
  async uploadSubmissionMediaRaw(
    requestParameters: UploadSubmissionMediaRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UploadSubmissionMedia201Response>> {
    if (requestParameters['submission'] == null) {
      throw new runtime.RequiredError(
        'submission',
        'Required parameter "submission" was null or undefined when calling uploadSubmissionMedia().'
      );
    }

    if (requestParameters['file'] == null) {
      throw new runtime.RequiredError(
        'file',
        'Required parameter "file" was null or undefined when calling uploadSubmissionMedia().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    const consumes: runtime.Consume[] = [
      { contentType: 'multipart/form-data' }
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters['file'] != null) {
      formParams.append('file', requestParameters['file'] as any);
    }

    const response = await this.request(
      {
        path: `/v2/submissions/{submission}/media`.replace(
          `{${'submission'}}`,
          encodeURIComponent(String(requestParameters['submission']))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: formParams
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UploadSubmissionMedia201ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Upload a file and attach it to a submission. Maximum file size: 10MB.
   * Upload media to a submission
   */
  async uploadSubmissionMedia(
    requestParameters: UploadSubmissionMediaRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UploadSubmissionMedia201Response> {
    const response = await this.uploadSubmissionMediaRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
