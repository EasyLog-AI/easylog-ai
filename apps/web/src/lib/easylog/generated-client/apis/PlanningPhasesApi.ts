/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API
 * Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Phase,
  PhaseCreatePayload,
  PhaseUpdatePayload,
} from '../models/index';
import {
    PhaseFromJSON,
    PhaseToJSON,
    PhaseCreatePayloadFromJSON,
    PhaseCreatePayloadToJSON,
    PhaseUpdatePayloadFromJSON,
    PhaseUpdatePayloadToJSON,
} from '../models/index';

export interface CreateProjectPhaseRequest {
    project: number;
    phaseCreatePayload: PhaseCreatePayload;
}

export interface DeleteProjectPhaseRequest {
    phase: number;
}

export interface ListProjectPhasesRequest {
    project: number;
}

export interface ShowProjectPhaseRequest {
    phase: number;
}

export interface UpdateProjectPhaseRequest {
    phase: number;
    phaseUpdatePayload: PhaseUpdatePayload;
}

/**
 * 
 */
export class PlanningPhasesApi extends runtime.BaseAPI {

    /**
     * Create project phase
     */
    async createProjectPhaseRaw(requestParameters: CreateProjectPhaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Phase>> {
        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling createProjectPhase().'
            );
        }

        if (requestParameters['phaseCreatePayload'] == null) {
            throw new runtime.RequiredError(
                'phaseCreatePayload',
                'Required parameter "phaseCreatePayload" was null or undefined when calling createProjectPhase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/v2/datasources/project/{project}/phases`;
        urlPath = urlPath.replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PhaseCreatePayloadToJSON(requestParameters['phaseCreatePayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PhaseFromJSON(jsonValue));
    }

    /**
     * Create project phase
     */
    async createProjectPhase(requestParameters: CreateProjectPhaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Phase> {
        const response = await this.createProjectPhaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete phase
     */
    async deleteProjectPhaseRaw(requestParameters: DeleteProjectPhaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['phase'] == null) {
            throw new runtime.RequiredError(
                'phase',
                'Required parameter "phase" was null or undefined when calling deleteProjectPhase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v2/datasources/phases/{phase}`;
        urlPath = urlPath.replace(`{${"phase"}}`, encodeURIComponent(String(requestParameters['phase'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete phase
     */
    async deleteProjectPhase(requestParameters: DeleteProjectPhaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProjectPhaseRaw(requestParameters, initOverrides);
    }

    /**
     * List project phases
     */
    async listProjectPhasesRaw(requestParameters: ListProjectPhasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Phase>>> {
        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling listProjectPhases().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v2/datasources/project/{project}/phases`;
        urlPath = urlPath.replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PhaseFromJSON));
    }

    /**
     * List project phases
     */
    async listProjectPhases(requestParameters: ListProjectPhasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Phase>> {
        const response = await this.listProjectPhasesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show phase
     */
    async showProjectPhaseRaw(requestParameters: ShowProjectPhaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Phase>> {
        if (requestParameters['phase'] == null) {
            throw new runtime.RequiredError(
                'phase',
                'Required parameter "phase" was null or undefined when calling showProjectPhase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v2/datasources/phases/{phase}`;
        urlPath = urlPath.replace(`{${"phase"}}`, encodeURIComponent(String(requestParameters['phase'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PhaseFromJSON(jsonValue));
    }

    /**
     * Show phase
     */
    async showProjectPhase(requestParameters: ShowProjectPhaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Phase> {
        const response = await this.showProjectPhaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update phase
     */
    async updateProjectPhaseRaw(requestParameters: UpdateProjectPhaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Phase>> {
        if (requestParameters['phase'] == null) {
            throw new runtime.RequiredError(
                'phase',
                'Required parameter "phase" was null or undefined when calling updateProjectPhase().'
            );
        }

        if (requestParameters['phaseUpdatePayload'] == null) {
            throw new runtime.RequiredError(
                'phaseUpdatePayload',
                'Required parameter "phaseUpdatePayload" was null or undefined when calling updateProjectPhase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/v2/datasources/phases/{phase}`;
        urlPath = urlPath.replace(`{${"phase"}}`, encodeURIComponent(String(requestParameters['phase'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PhaseUpdatePayloadToJSON(requestParameters['phaseUpdatePayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PhaseFromJSON(jsonValue));
    }

    /**
     * Update phase
     */
    async updateProjectPhase(requestParameters: UpdateProjectPhaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Phase> {
        const response = await this.updateProjectPhaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
