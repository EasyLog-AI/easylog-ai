/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import * as runtime from '../runtime';
import type {
  CategoryCollection,
  FormListCollection,
  FormResource,
  ProjectFormCollection,
  StoreFormInput,
  UpdateFormInput
} from '../models/index';
import {
  CategoryCollectionFromJSON,
  CategoryCollectionToJSON,
  FormListCollectionFromJSON,
  FormListCollectionToJSON,
  FormResourceFromJSON,
  FormResourceToJSON,
  ProjectFormCollectionFromJSON,
  ProjectFormCollectionToJSON,
  StoreFormInputFromJSON,
  StoreFormInputToJSON,
  UpdateFormInputFromJSON,
  UpdateFormInputToJSON
} from '../models/index';

export interface CreateFormRequest {
  storeFormInput: StoreFormInput;
}

export interface DeleteFormRequest {
  form: number;
}

export interface GetFormSchemaRequest {
  form: number;
}

export interface ListFormCategoriesRequest {
  form: number;
}

export interface ListFormProjectFormsRequest {
  form: number;
}

export interface ListFormVersionsRequest {
  form: number;
}

export interface ListFormsRequest {
  page?: number;
  perPage?: number;
}

export interface ShowFormRequest {
  form: number;
}

export interface UpdateFormRequest {
  form: number;
  updateFormInput: UpdateFormInput;
}

export class FormsApi extends runtime.BaseAPI {
  /** Store a newly created resource in storage. Create form */
  async createFormRaw(
    requestParameters: CreateFormRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<FormResource>> {
    if (requestParameters['storeFormInput'] == null) {
      throw new runtime.RequiredError(
        'storeFormInput',
        'Required parameter "storeFormInput" was null or undefined when calling createForm().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    const response = await this.request(
      {
        path: `/v2/forms`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: StoreFormInputToJSON(requestParameters['storeFormInput'])
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      FormResourceFromJSON(jsonValue)
    );
  }

  /** Store a newly created resource in storage. Create form */
  async createForm(
    requestParameters: CreateFormRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<FormResource> {
    const response = await this.createFormRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /** Remove the specified resource from storage. Delete form */
  async deleteFormRaw(
    requestParameters: DeleteFormRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['form'] == null) {
      throw new runtime.RequiredError(
        'form',
        'Required parameter "form" was null or undefined when calling deleteForm().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    const response = await this.request(
      {
        path: `/v2/forms/{form}`.replace(
          `{${'form'}}`,
          encodeURIComponent(String(requestParameters['form']))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /** Remove the specified resource from storage. Delete form */
  async deleteForm(
    requestParameters: DeleteFormRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteFormRaw(requestParameters, initOverrides);
  }

  /** Get form JSON schema. Get form JSON schema */
  async getFormSchemaRaw(
    requestParameters: GetFormSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['form'] == null) {
      throw new runtime.RequiredError(
        'form',
        'Required parameter "form" was null or undefined when calling getFormSchema().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    const response = await this.request(
      {
        path: `/v2/forms/{form}/schema`.replace(
          `{${'form'}}`,
          encodeURIComponent(String(requestParameters['form']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /** Get form JSON schema. Get form JSON schema */
  async getFormSchema(
    requestParameters: GetFormSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.getFormSchemaRaw(requestParameters, initOverrides);
  }

  /** List categories for a form. List categories for a form */
  async listFormCategoriesRaw(
    requestParameters: ListFormCategoriesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CategoryCollection>> {
    if (requestParameters['form'] == null) {
      throw new runtime.RequiredError(
        'form',
        'Required parameter "form" was null or undefined when calling listFormCategories().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    const response = await this.request(
      {
        path: `/v2/forms/{form}/categories`.replace(
          `{${'form'}}`,
          encodeURIComponent(String(requestParameters['form']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CategoryCollectionFromJSON(jsonValue)
    );
  }

  /** List categories for a form. List categories for a form */
  async listFormCategories(
    requestParameters: ListFormCategoriesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CategoryCollection> {
    const response = await this.listFormCategoriesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get all ProjectForms (form-to-project associations) for a specific form.
   * This helps map from a form ID to project form IDs which are needed for
   * submissions. List project forms for this form
   */
  async listFormProjectFormsRaw(
    requestParameters: ListFormProjectFormsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ProjectFormCollection>> {
    if (requestParameters['form'] == null) {
      throw new runtime.RequiredError(
        'form',
        'Required parameter "form" was null or undefined when calling listFormProjectForms().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    const response = await this.request(
      {
        path: `/v2/forms/{form}/project-forms`.replace(
          `{${'form'}}`,
          encodeURIComponent(String(requestParameters['form']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ProjectFormCollectionFromJSON(jsonValue)
    );
  }

  /**
   * Get all ProjectForms (form-to-project associations) for a specific form.
   * This helps map from a form ID to project form IDs which are needed for
   * submissions. List project forms for this form
   */
  async listFormProjectForms(
    requestParameters: ListFormProjectFormsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ProjectFormCollection> {
    const response = await this.listFormProjectFormsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** List form versions. List form versions */
  async listFormVersionsRaw(
    requestParameters: ListFormVersionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['form'] == null) {
      throw new runtime.RequiredError(
        'form',
        'Required parameter "form" was null or undefined when calling listFormVersions().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    const response = await this.request(
      {
        path: `/v2/forms/{form}/versions`.replace(
          `{${'form'}}`,
          encodeURIComponent(String(requestParameters['form']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /** List form versions. List form versions */
  async listFormVersions(
    requestParameters: ListFormVersionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.listFormVersionsRaw(requestParameters, initOverrides);
  }

  /**
   * Display a listing of the resource. Returns a paginated list of forms
   * without the heavy content field. Use the show endpoint to retrieve a
   * specific form with its full content. List forms (paginated)
   */
  async listFormsRaw(
    requestParameters: ListFormsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<FormListCollection>> {
    const queryParameters: any = {};

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page'];
    }

    if (requestParameters['perPage'] != null) {
      queryParameters['per_page'] = requestParameters['perPage'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    const response = await this.request(
      {
        path: `/v2/forms`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      FormListCollectionFromJSON(jsonValue)
    );
  }

  /**
   * Display a listing of the resource. Returns a paginated list of forms
   * without the heavy content field. Use the show endpoint to retrieve a
   * specific form with its full content. List forms (paginated)
   */
  async listForms(
    requestParameters: ListFormsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<FormListCollection> {
    const response = await this.listFormsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /** Display the specified resource. Show form */
  async showFormRaw(
    requestParameters: ShowFormRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<FormResource>> {
    if (requestParameters['form'] == null) {
      throw new runtime.RequiredError(
        'form',
        'Required parameter "form" was null or undefined when calling showForm().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    const response = await this.request(
      {
        path: `/v2/forms/{form}`.replace(
          `{${'form'}}`,
          encodeURIComponent(String(requestParameters['form']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      FormResourceFromJSON(jsonValue)
    );
  }

  /** Display the specified resource. Show form */
  async showForm(
    requestParameters: ShowFormRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<FormResource> {
    const response = await this.showFormRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /** Update the specified resource in storage. Update form */
  async updateFormRaw(
    requestParameters: UpdateFormRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<FormResource>> {
    if (requestParameters['form'] == null) {
      throw new runtime.RequiredError(
        'form',
        'Required parameter "form" was null or undefined when calling updateForm().'
      );
    }

    if (requestParameters['updateFormInput'] == null) {
      throw new runtime.RequiredError(
        'updateFormInput',
        'Required parameter "updateFormInput" was null or undefined when calling updateForm().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    const response = await this.request(
      {
        path: `/v2/forms/{form}`.replace(
          `{${'form'}}`,
          encodeURIComponent(String(requestParameters['form']))
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateFormInputToJSON(requestParameters['updateFormInput'])
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      FormResourceFromJSON(jsonValue)
    );
  }

  /** Update the specified resource in storage. Update form */
  async updateForm(
    requestParameters: UpdateFormRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<FormResource> {
    const response = await this.updateFormRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
