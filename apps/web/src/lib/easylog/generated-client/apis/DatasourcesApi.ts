/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API
 * Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EntityCollection,
  Model1fc1206aaba89a63335ac7991e0f5cc3200Response,
  Model2e63ab79cdb720663c3edf47fee45c62200Response,
  ResourceCollection,
  ShowDatasourceEntry200Response,
} from '../models/index';
import {
    EntityCollectionFromJSON,
    EntityCollectionToJSON,
    Model1fc1206aaba89a63335ac7991e0f5cc3200ResponseFromJSON,
    Model1fc1206aaba89a63335ac7991e0f5cc3200ResponseToJSON,
    Model2e63ab79cdb720663c3edf47fee45c62200ResponseFromJSON,
    Model2e63ab79cdb720663c3edf47fee45c62200ResponseToJSON,
    ResourceCollectionFromJSON,
    ResourceCollectionToJSON,
    ShowDatasourceEntry200ResponseFromJSON,
    ShowDatasourceEntry200ResponseToJSON,
} from '../models/index';

export interface 09ddae27e276f3ba7e37930c182b15fdRequest {
    resource: number;
}

export interface 1fc1206aaba89a63335ac7991e0f5cc3Request {
    resource: number;
    slug: string;
}

export interface 2e63ab79cdb720663c3edf47fee45c62Request {
    entity: number;
}

export interface 6a0a612ba4d6f5c36b9a17437b0e24daRequest {
    types?: Array<string>;
}

export interface ShowDatasourceEntryRequest {
    entity: number;
    entityDatum: number;
}

/**
 * 
 */
export class DatasourcesApi extends runtime.BaseAPI {

    /**
     * Retrieve a resource
     */
    async _09ddae27e276f3ba7e37930c182b15fdRaw(requestParameters: 09ddae27e276f3ba7e37930c182b15fdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResourceCollection>> {
        if (requestParameters['resource'] == null) {
            throw new runtime.RequiredError(
                'resource',
                'Required parameter "resource" was null or undefined when calling _09ddae27e276f3ba7e37930c182b15fd().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v2/datasources/resources/{resource}`;
        urlPath = urlPath.replace(`{${"resource"}}`, encodeURIComponent(String(requestParameters['resource'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResourceCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieve a resource
     */
    async _09ddae27e276f3ba7e37930c182b15fd(requestParameters: 09ddae27e276f3ba7e37930c182b15fdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResourceCollection> {
        const response = await this._09ddae27e276f3ba7e37930c182b15fdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve resource data by group
     */
    async _1fc1206aaba89a63335ac7991e0f5cc3Raw(requestParameters: 1fc1206aaba89a63335ac7991e0f5cc3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Model1fc1206aaba89a63335ac7991e0f5cc3200Response>> {
        if (requestParameters['resource'] == null) {
            throw new runtime.RequiredError(
                'resource',
                'Required parameter "resource" was null or undefined when calling _1fc1206aaba89a63335ac7991e0f5cc3().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling _1fc1206aaba89a63335ac7991e0f5cc3().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v2/datasources/resources/{resource}/{slug}`;
        urlPath = urlPath.replace(`{${"resource"}}`, encodeURIComponent(String(requestParameters['resource'])));
        urlPath = urlPath.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Model1fc1206aaba89a63335ac7991e0f5cc3200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve resource data by group
     */
    async _1fc1206aaba89a63335ac7991e0f5cc3(requestParameters: 1fc1206aaba89a63335ac7991e0f5cc3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Model1fc1206aaba89a63335ac7991e0f5cc3200Response> {
        const response = await this._1fc1206aaba89a63335ac7991e0f5cc3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a single datasource
     */
    async _2e63ab79cdb720663c3edf47fee45c62Raw(requestParameters: 2e63ab79cdb720663c3edf47fee45c62Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Model2e63ab79cdb720663c3edf47fee45c62200Response>> {
        if (requestParameters['entity'] == null) {
            throw new runtime.RequiredError(
                'entity',
                'Required parameter "entity" was null or undefined when calling _2e63ab79cdb720663c3edf47fee45c62().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v2/datasources/{entity}`;
        urlPath = urlPath.replace(`{${"entity"}}`, encodeURIComponent(String(requestParameters['entity'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Model2e63ab79cdb720663c3edf47fee45c62200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a single datasource
     */
    async _2e63ab79cdb720663c3edf47fee45c62(requestParameters: 2e63ab79cdb720663c3edf47fee45c62Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Model2e63ab79cdb720663c3edf47fee45c62200Response> {
        const response = await this._2e63ab79cdb720663c3edf47fee45c62Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List datasources for the authenticated client
     */
    async _6a0a612ba4d6f5c36b9a17437b0e24daRaw(requestParameters: 6a0a612ba4d6f5c36b9a17437b0e24daRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityCollection>> {
        const queryParameters: any = {};

        if (requestParameters['types'] != null) {
            queryParameters['types[]'] = requestParameters['types'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v2/datasources`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityCollectionFromJSON(jsonValue));
    }

    /**
     * List datasources for the authenticated client
     */
    async _6a0a612ba4d6f5c36b9a17437b0e24da(requestParameters: 6a0a612ba4d6f5c36b9a17437b0e24daRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityCollection> {
        const response = await this._6a0a612ba4d6f5c36b9a17437b0e24daRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List resource entities
     */
    async eaf34e7e001fc60bfae7ca7815847c0dRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResourceCollection>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v2/datasources/resources`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResourceCollectionFromJSON(jsonValue));
    }

    /**
     * List resource entities
     */
    async eaf34e7e001fc60bfae7ca7815847c0d(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResourceCollection> {
        const response = await this.eaf34e7e001fc60bfae7ca7815847c0dRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a specific entry (entity datum) from a datasource entity.
     * Show datasource entry
     */
    async showDatasourceEntryRaw(requestParameters: ShowDatasourceEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowDatasourceEntry200Response>> {
        if (requestParameters['entity'] == null) {
            throw new runtime.RequiredError(
                'entity',
                'Required parameter "entity" was null or undefined when calling showDatasourceEntry().'
            );
        }

        if (requestParameters['entityDatum'] == null) {
            throw new runtime.RequiredError(
                'entityDatum',
                'Required parameter "entityDatum" was null or undefined when calling showDatasourceEntry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("passport", []);
        }


        let urlPath = `/v2/datasources/{entity}/entries/{entityDatum}`;
        urlPath = urlPath.replace(`{${"entity"}}`, encodeURIComponent(String(requestParameters['entity'])));
        urlPath = urlPath.replace(`{${"entityDatum"}}`, encodeURIComponent(String(requestParameters['entityDatum'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowDatasourceEntry200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific entry (entity datum) from a datasource entity.
     * Show datasource entry
     */
    async showDatasourceEntry(requestParameters: ShowDatasourceEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowDatasourceEntry200Response> {
        const response = await this.showDatasourceEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
