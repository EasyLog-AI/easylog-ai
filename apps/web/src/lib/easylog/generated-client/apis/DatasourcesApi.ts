/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import * as runtime from '../runtime';
import type {
  EntityCollection,
  ResourceCollection,
  ShowDatasource200Response,
  ShowDatasourceEntry200Response,
  ShowResourceByGroup200Response
} from '../models/index';
import {
  EntityCollectionFromJSON,
  EntityCollectionToJSON,
  ResourceCollectionFromJSON,
  ResourceCollectionToJSON,
  ShowDatasource200ResponseFromJSON,
  ShowDatasource200ResponseToJSON,
  ShowDatasourceEntry200ResponseFromJSON,
  ShowDatasourceEntry200ResponseToJSON,
  ShowResourceByGroup200ResponseFromJSON,
  ShowResourceByGroup200ResponseToJSON
} from '../models/index';

export interface ListDatasourcesRequest {
  types?: Array<string>;
}

export interface ShowDatasourceRequest {
  entity: number;
}

export interface ShowDatasourceEntryRequest {
  entity: number;
  entityDatum: number;
}

export interface ShowResourceRequest {
  resource: number;
}

export interface ShowResourceByGroupRequest {
  resource: number;
  slug: string;
}

export class DatasourcesApi extends runtime.BaseAPI {
  /** List datasources for the authenticated client */
  async listDatasourcesRaw(
    requestParameters: ListDatasourcesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<EntityCollection>> {
    const queryParameters: any = {};

    if (requestParameters['types'] != null) {
      queryParameters['types[]'] = requestParameters['types'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/v2/datasources`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EntityCollectionFromJSON(jsonValue)
    );
  }

  /** List datasources for the authenticated client */
  async listDatasources(
    requestParameters: ListDatasourcesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<EntityCollection> {
    const response = await this.listDatasourcesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** List resource entities */
  async listResourcesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResourceCollection>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/v2/datasources/resources`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ResourceCollectionFromJSON(jsonValue)
    );
  }

  /** List resource entities */
  async listResources(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResourceCollection> {
    const response = await this.listResourcesRaw(initOverrides);
    return await response.value();
  }

  /** Retrieve a single datasource */
  async showDatasourceRaw(
    requestParameters: ShowDatasourceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ShowDatasource200Response>> {
    if (requestParameters['entity'] == null) {
      throw new runtime.RequiredError(
        'entity',
        'Required parameter "entity" was null or undefined when calling showDatasource().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/v2/datasources/{entity}`;
    urlPath = urlPath.replace(
      `{${'entity'}}`,
      encodeURIComponent(String(requestParameters['entity']))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ShowDatasource200ResponseFromJSON(jsonValue)
    );
  }

  /** Retrieve a single datasource */
  async showDatasource(
    requestParameters: ShowDatasourceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ShowDatasource200Response> {
    const response = await this.showDatasourceRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Retrieve a specific entry (entity datum) from a datasource entity. Show
   * datasource entry
   */
  async showDatasourceEntryRaw(
    requestParameters: ShowDatasourceEntryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ShowDatasourceEntry200Response>> {
    if (requestParameters['entity'] == null) {
      throw new runtime.RequiredError(
        'entity',
        'Required parameter "entity" was null or undefined when calling showDatasourceEntry().'
      );
    }

    if (requestParameters['entityDatum'] == null) {
      throw new runtime.RequiredError(
        'entityDatum',
        'Required parameter "entityDatum" was null or undefined when calling showDatasourceEntry().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    let urlPath = `/v2/datasources/{entity}/entries/{entityDatum}`;
    urlPath = urlPath.replace(
      `{${'entity'}}`,
      encodeURIComponent(String(requestParameters['entity']))
    );
    urlPath = urlPath.replace(
      `{${'entityDatum'}}`,
      encodeURIComponent(String(requestParameters['entityDatum']))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ShowDatasourceEntry200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Retrieve a specific entry (entity datum) from a datasource entity. Show
   * datasource entry
   */
  async showDatasourceEntry(
    requestParameters: ShowDatasourceEntryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ShowDatasourceEntry200Response> {
    const response = await this.showDatasourceEntryRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Retrieve a resource */
  async showResourceRaw(
    requestParameters: ShowResourceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResourceCollection>> {
    if (requestParameters['resource'] == null) {
      throw new runtime.RequiredError(
        'resource',
        'Required parameter "resource" was null or undefined when calling showResource().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/v2/datasources/resources/{resource}`;
    urlPath = urlPath.replace(
      `{${'resource'}}`,
      encodeURIComponent(String(requestParameters['resource']))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ResourceCollectionFromJSON(jsonValue)
    );
  }

  /** Retrieve a resource */
  async showResource(
    requestParameters: ShowResourceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResourceCollection> {
    const response = await this.showResourceRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Retrieve resource data by group */
  async showResourceByGroupRaw(
    requestParameters: ShowResourceByGroupRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ShowResourceByGroup200Response>> {
    if (requestParameters['resource'] == null) {
      throw new runtime.RequiredError(
        'resource',
        'Required parameter "resource" was null or undefined when calling showResourceByGroup().'
      );
    }

    if (requestParameters['slug'] == null) {
      throw new runtime.RequiredError(
        'slug',
        'Required parameter "slug" was null or undefined when calling showResourceByGroup().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/v2/datasources/resources/{resource}/{slug}`;
    urlPath = urlPath.replace(
      `{${'resource'}}`,
      encodeURIComponent(String(requestParameters['resource']))
    );
    urlPath = urlPath.replace(
      `{${'slug'}}`,
      encodeURIComponent(String(requestParameters['slug']))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ShowResourceByGroup200ResponseFromJSON(jsonValue)
    );
  }

  /** Retrieve resource data by group */
  async showResourceByGroup(
    requestParameters: ShowResourceByGroupRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ShowResourceByGroup200Response> {
    const response = await this.showResourceByGroupRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
