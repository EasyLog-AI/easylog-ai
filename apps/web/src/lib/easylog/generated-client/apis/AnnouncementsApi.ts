/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API
 * Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnnouncementCollection,
  AnnouncementResource,
  AnnouncementStatusInput,
} from '../models/index';
import {
    AnnouncementCollectionFromJSON,
    AnnouncementCollectionToJSON,
    AnnouncementResourceFromJSON,
    AnnouncementResourceToJSON,
    AnnouncementStatusInputFromJSON,
    AnnouncementStatusInputToJSON,
} from '../models/index';

export interface ShowAnnouncementRequest {
    announcement: number;
}

export interface UpdateAnnouncementStatusRequest {
    announcement: number;
    announcementStatusInput: AnnouncementStatusInput;
}

/**
 * 
 */
export class AnnouncementsApi extends runtime.BaseAPI {

    /**
     * List all announcements for the authenticated user. Automatically marks unread announcements as retrieved.
     * List announcements
     */
    async listAnnouncementsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnnouncementCollection>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("passport", []);
        }


        let urlPath = `/v2/announcements`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnnouncementCollectionFromJSON(jsonValue));
    }

    /**
     * List all announcements for the authenticated user. Automatically marks unread announcements as retrieved.
     * List announcements
     */
    async listAnnouncements(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnnouncementCollection> {
        const response = await this.listAnnouncementsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Display a specific announcement. Automatically marks the announcement as retrieved if not already marked.
     * Show announcement
     */
    async showAnnouncementRaw(requestParameters: ShowAnnouncementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnnouncementResource>> {
        if (requestParameters['announcement'] == null) {
            throw new runtime.RequiredError(
                'announcement',
                'Required parameter "announcement" was null or undefined when calling showAnnouncement().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("passport", []);
        }


        let urlPath = `/v2/announcements/{announcement}`;
        urlPath = urlPath.replace(`{${"announcement"}}`, encodeURIComponent(String(requestParameters['announcement'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnnouncementResourceFromJSON(jsonValue));
    }

    /**
     * Display a specific announcement. Automatically marks the announcement as retrieved if not already marked.
     * Show announcement
     */
    async showAnnouncement(requestParameters: ShowAnnouncementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnnouncementResource> {
        const response = await this.showAnnouncementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Track user interaction with an announcement by recording status updates (retrieved, opened, scrolled_down, opened_attachment, confirmed_messages_read).
     * Update announcement status
     */
    async updateAnnouncementStatusRaw(requestParameters: UpdateAnnouncementStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnnouncementResource>> {
        if (requestParameters['announcement'] == null) {
            throw new runtime.RequiredError(
                'announcement',
                'Required parameter "announcement" was null or undefined when calling updateAnnouncementStatus().'
            );
        }

        if (requestParameters['announcementStatusInput'] == null) {
            throw new runtime.RequiredError(
                'announcementStatusInput',
                'Required parameter "announcementStatusInput" was null or undefined when calling updateAnnouncementStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("passport", []);
        }


        let urlPath = `/v2/announcements/{announcement}/status`;
        urlPath = urlPath.replace(`{${"announcement"}}`, encodeURIComponent(String(requestParameters['announcement'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnnouncementStatusInputToJSON(requestParameters['announcementStatusInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnnouncementResourceFromJSON(jsonValue));
    }

    /**
     * Track user interaction with an announcement by recording status updates (retrieved, opened, scrolled_down, opened_attachment, confirmed_messages_read).
     * Update announcement status
     */
    async updateAnnouncementStatus(requestParameters: UpdateAnnouncementStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnnouncementResource> {
        const response = await this.updateAnnouncementStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
