/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import * as runtime from '../runtime';
import type {
  FollowUpCategoryCollection,
  FollowUpCategoryResource
} from '../models/index';
import {
  FollowUpCategoryCollectionFromJSON,
  FollowUpCategoryCollectionToJSON,
  FollowUpCategoryResourceFromJSON,
  FollowUpCategoryResourceToJSON
} from '../models/index';

export interface ShowFollowUpCategoryRequest {
  category: number;
}

export class FollowUpCategoriesApi extends runtime.BaseAPI {
  /**
   * List all follow-up categories for the current client. Categories are
   * filtered by user group membership unless the user has the
   * FollowUpOverrideGroups permission. Users will only see categories that
   * are either assigned to their groups or have no group assignment
   * (ungrouped). List follow-up categories
   */
  async listFollowUpCategoriesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<FollowUpCategoryCollection>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    let urlPath = `/v2/follow-ups/categories`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      FollowUpCategoryCollectionFromJSON(jsonValue)
    );
  }

  /**
   * List all follow-up categories for the current client. Categories are
   * filtered by user group membership unless the user has the
   * FollowUpOverrideGroups permission. Users will only see categories that
   * are either assigned to their groups or have no group assignment
   * (ungrouped). List follow-up categories
   */
  async listFollowUpCategories(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<FollowUpCategoryCollection> {
    const response = await this.listFollowUpCategoriesRaw(initOverrides);
    return await response.value();
  }

  /** Display the specified resource. Show follow-up category */
  async showFollowUpCategoryRaw(
    requestParameters: ShowFollowUpCategoryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<FollowUpCategoryResource>> {
    if (requestParameters['category'] == null) {
      throw new runtime.RequiredError(
        'category',
        'Required parameter "category" was null or undefined when calling showFollowUpCategory().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    let urlPath = `/v2/follow-ups/categories/{category}`;
    urlPath = urlPath.replace(
      `{${'category'}}`,
      encodeURIComponent(String(requestParameters['category']))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      FollowUpCategoryResourceFromJSON(jsonValue)
    );
  }

  /** Display the specified resource. Show follow-up category */
  async showFollowUpCategory(
    requestParameters: ShowFollowUpCategoryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<FollowUpCategoryResource> {
    const response = await this.showFollowUpCategoryRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
