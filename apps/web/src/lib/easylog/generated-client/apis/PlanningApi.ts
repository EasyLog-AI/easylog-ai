/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API
 * Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Project,
  ProjectCollection,
  ProjectPayload,
} from '../models/index';
import {
    ProjectFromJSON,
    ProjectToJSON,
    ProjectCollectionFromJSON,
    ProjectCollectionToJSON,
    ProjectPayloadFromJSON,
    ProjectPayloadToJSON,
} from '../models/index';

export interface CreateProjectRequest {
    projectPayload: ProjectPayload;
}

export interface CreateProjectInDatasourceRequest {
    entity: string;
    projectPayload: ProjectPayload;
}

export interface DeleteProjectRequest {
    project: number;
}

export interface ListProjectsRequest {
    types?: Array<string>;
    startDate?: Date;
    endDate?: Date;
}

export interface ListProjectsForResourceRequest {
    resource: number;
    slug: string;
    startDate?: Date;
    endDate?: Date;
}

export interface ShowProjectRequest {
    project: number;
    startDate?: Date;
    endDate?: Date;
}

export interface UpdateProjectRequest {
    project: number;
    projectPayload: ProjectPayload;
}

/**
 * 
 */
export class PlanningApi extends runtime.BaseAPI {

    /**
     * Create project
     */
    async createProjectRaw(requestParameters: CreateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters['projectPayload'] == null) {
            throw new runtime.RequiredError(
                'projectPayload',
                'Required parameter "projectPayload" was null or undefined when calling createProject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/v2/datasources/projects`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectPayloadToJSON(requestParameters['projectPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Create project
     */
    async createProject(requestParameters: CreateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.createProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create project in specific datasource
     */
    async createProjectInDatasourceRaw(requestParameters: CreateProjectInDatasourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters['entity'] == null) {
            throw new runtime.RequiredError(
                'entity',
                'Required parameter "entity" was null or undefined when calling createProjectInDatasource().'
            );
        }

        if (requestParameters['projectPayload'] == null) {
            throw new runtime.RequiredError(
                'projectPayload',
                'Required parameter "projectPayload" was null or undefined when calling createProjectInDatasource().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/v2/datasources/{entity}/project`;
        urlPath = urlPath.replace(`{${"entity"}}`, encodeURIComponent(String(requestParameters['entity'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectPayloadToJSON(requestParameters['projectPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Create project in specific datasource
     */
    async createProjectInDatasource(requestParameters: CreateProjectInDatasourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.createProjectInDatasourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete project
     */
    async deleteProjectRaw(requestParameters: DeleteProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling deleteProject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v2/datasources/projects/{project}`;
        urlPath = urlPath.replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete project
     */
    async deleteProject(requestParameters: DeleteProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProjectRaw(requestParameters, initOverrides);
    }

    /**
     * List projects
     */
    async listProjectsRaw(requestParameters: ListProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectCollection>> {
        const queryParameters: any = {};

        if (requestParameters['types'] != null) {
            queryParameters['types[]'] = requestParameters['types'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v2/datasources/projects`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectCollectionFromJSON(jsonValue));
    }

    /**
     * List projects
     */
    async listProjects(requestParameters: ListProjectsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectCollection> {
        const response = await this.listProjectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List projects for a resource group
     */
    async listProjectsForResourceRaw(requestParameters: ListProjectsForResourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        if (requestParameters['resource'] == null) {
            throw new runtime.RequiredError(
                'resource',
                'Required parameter "resource" was null or undefined when calling listProjectsForResource().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling listProjectsForResource().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v2/datasources/resources/{resource}/projects/{slug}`;
        urlPath = urlPath.replace(`{${"resource"}}`, encodeURIComponent(String(requestParameters['resource'])));
        urlPath = urlPath.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List projects for a resource group
     */
    async listProjectsForResource(requestParameters: ListProjectsForResourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>> {
        const response = await this.listProjectsForResourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show project
     */
    async showProjectRaw(requestParameters: ShowProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling showProject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v2/datasources/projects/{project}`;
        urlPath = urlPath.replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Show project
     */
    async showProject(requestParameters: ShowProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.showProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update project
     */
    async updateProjectRaw(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling updateProject().'
            );
        }

        if (requestParameters['projectPayload'] == null) {
            throw new runtime.RequiredError(
                'projectPayload',
                'Required parameter "projectPayload" was null or undefined when calling updateProject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/v2/datasources/projects/{project}`;
        urlPath = urlPath.replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectPayloadToJSON(requestParameters['projectPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Update project
     */
    async updateProject(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.updateProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
