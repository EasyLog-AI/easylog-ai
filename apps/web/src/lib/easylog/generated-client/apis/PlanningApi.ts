/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API
 * Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Project,
  ProjectCollection,
} from '../models/index';
import {
    ProjectFromJSON,
    ProjectToJSON,
    ProjectCollectionFromJSON,
    ProjectCollectionToJSON,
} from '../models/index';

export interface 0b5ba3d62e93a3ed3e284afd7601dc64Request {
    project: number;
}

export interface 74eee5830a4b7a7dcf6cfa37fdc05cc6Request {
    types?: Array<string>;
    startDate?: Date;
    endDate?: Date;
}

export interface 8758805bf050a2cd9ec432cb31bf8a94Request {
    project: number;
    startDate?: Date;
    endDate?: Date;
}

export interface 9087972305479790db2ba10ea4171932Request {
    requestBody: { [key: string]: string; };
}

export interface B11778cc2f15aa8c6df61b6fb5f4b2ccRequest {
    project: number;
    requestBody: { [key: string]: string; };
}

export interface C7fe599e2a4b018c9c0eb211a038b108Request {
    resource: number;
    slug: string;
    startDate?: Date;
    endDate?: Date;
}

/**
 * 
 */
export class PlanningApi extends runtime.BaseAPI {

    /**
     * Delete project
     */
    async _0b5ba3d62e93a3ed3e284afd7601dc64Raw(requestParameters: 0b5ba3d62e93a3ed3e284afd7601dc64Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling _0b5ba3d62e93a3ed3e284afd7601dc64().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v2/datasources/projects/{project}`;
        urlPath = urlPath.replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete project
     */
    async _0b5ba3d62e93a3ed3e284afd7601dc64(requestParameters: 0b5ba3d62e93a3ed3e284afd7601dc64Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._0b5ba3d62e93a3ed3e284afd7601dc64Raw(requestParameters, initOverrides);
    }

    /**
     * List projects
     */
    async _74eee5830a4b7a7dcf6cfa37fdc05cc6Raw(requestParameters: 74eee5830a4b7a7dcf6cfa37fdc05cc6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectCollection>> {
        const queryParameters: any = {};

        if (requestParameters['types'] != null) {
            queryParameters['types[]'] = requestParameters['types'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v2/datasources/projects`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectCollectionFromJSON(jsonValue));
    }

    /**
     * List projects
     */
    async _74eee5830a4b7a7dcf6cfa37fdc05cc6(requestParameters: 74eee5830a4b7a7dcf6cfa37fdc05cc6Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectCollection> {
        const response = await this._74eee5830a4b7a7dcf6cfa37fdc05cc6Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show project
     */
    async _8758805bf050a2cd9ec432cb31bf8a94Raw(requestParameters: 8758805bf050a2cd9ec432cb31bf8a94Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling _8758805bf050a2cd9ec432cb31bf8a94().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v2/datasources/projects/{project}`;
        urlPath = urlPath.replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Show project
     */
    async _8758805bf050a2cd9ec432cb31bf8a94(requestParameters: 8758805bf050a2cd9ec432cb31bf8a94Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this._8758805bf050a2cd9ec432cb31bf8a94Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create project
     */
    async _9087972305479790db2ba10ea4171932Raw(requestParameters: 9087972305479790db2ba10ea4171932Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling _9087972305479790db2ba10ea4171932().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/v2/datasources/projects`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Create project
     */
    async _9087972305479790db2ba10ea4171932(requestParameters: 9087972305479790db2ba10ea4171932Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this._9087972305479790db2ba10ea4171932Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update project
     */
    async b11778cc2f15aa8c6df61b6fb5f4b2ccRaw(requestParameters: B11778cc2f15aa8c6df61b6fb5f4b2ccRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling b11778cc2f15aa8c6df61b6fb5f4b2cc().'
            );
        }

        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling b11778cc2f15aa8c6df61b6fb5f4b2cc().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/v2/datasources/projects/{project}`;
        urlPath = urlPath.replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Update project
     */
    async b11778cc2f15aa8c6df61b6fb5f4b2cc(requestParameters: B11778cc2f15aa8c6df61b6fb5f4b2ccRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.b11778cc2f15aa8c6df61b6fb5f4b2ccRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List projects for a resource group
     */
    async c7fe599e2a4b018c9c0eb211a038b108Raw(requestParameters: C7fe599e2a4b018c9c0eb211a038b108Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        if (requestParameters['resource'] == null) {
            throw new runtime.RequiredError(
                'resource',
                'Required parameter "resource" was null or undefined when calling c7fe599e2a4b018c9c0eb211a038b108().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling c7fe599e2a4b018c9c0eb211a038b108().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v2/datasources/resources/{resource}/projects/{slug}`;
        urlPath = urlPath.replace(`{${"resource"}}`, encodeURIComponent(String(requestParameters['resource'])));
        urlPath = urlPath.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List projects for a resource group
     */
    async c7fe599e2a4b018c9c0eb211a038b108(requestParameters: C7fe599e2a4b018c9c0eb211a038b108Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>> {
        const response = await this.c7fe599e2a4b018c9c0eb211a038b108Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
