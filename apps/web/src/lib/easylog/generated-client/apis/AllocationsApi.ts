/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import * as runtime from '../runtime';
import type {
  EntityAllocation,
  EntityAllocationBulkPayload,
  EntityAllocationCollection,
  EntityAllocationPayload,
  EntityAllocationUpdateBulkPayload
} from '../models/index';
import {
  EntityAllocationFromJSON,
  EntityAllocationToJSON,
  EntityAllocationBulkPayloadFromJSON,
  EntityAllocationBulkPayloadToJSON,
  EntityAllocationCollectionFromJSON,
  EntityAllocationCollectionToJSON,
  EntityAllocationPayloadFromJSON,
  EntityAllocationPayloadToJSON,
  EntityAllocationUpdateBulkPayloadFromJSON,
  EntityAllocationUpdateBulkPayloadToJSON
} from '../models/index';

export interface CreateAllocationRequest {
  entityAllocationPayload: EntityAllocationPayload;
}

export interface CreateMultipleAllocationsRequest {
  entityAllocationBulkPayload: EntityAllocationBulkPayload;
}

export interface DeleteAllocationRequest {
  allocation: number;
}

export interface ShowAllocationRequest {
  allocation: number;
}

export interface ShowMultipleAllocationsRequest {
  ids?: string;
}

export interface UpdateAllocationRequest {
  allocation: number;
  entityAllocationPayload: EntityAllocationPayload;
}

export interface UpdateMultipleAllocationsRequest {
  entityAllocationUpdateBulkPayload: EntityAllocationUpdateBulkPayload;
}

export class AllocationsApi extends runtime.BaseAPI {
  /** Create allocation (deprecated) */
  async createAllocationRaw(
    requestParameters: CreateAllocationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<EntityAllocation>> {
    if (requestParameters['entityAllocationPayload'] == null) {
      throw new runtime.RequiredError(
        'entityAllocationPayload',
        'Required parameter "entityAllocationPayload" was null or undefined when calling createAllocation().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/v2/datasources/allocations`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: EntityAllocationPayloadToJSON(
          requestParameters['entityAllocationPayload']
        )
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EntityAllocationFromJSON(jsonValue)
    );
  }

  /** Create allocation (deprecated) */
  async createAllocation(
    requestParameters: CreateAllocationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<EntityAllocation> {
    const response = await this.createAllocationRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Create multiple allocations */
  async createMultipleAllocationsRaw(
    requestParameters: CreateMultipleAllocationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<EntityAllocationCollection>> {
    if (requestParameters['entityAllocationBulkPayload'] == null) {
      throw new runtime.RequiredError(
        'entityAllocationBulkPayload',
        'Required parameter "entityAllocationBulkPayload" was null or undefined when calling createMultipleAllocations().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/v2/datasources/allocations/multiple`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: EntityAllocationBulkPayloadToJSON(
          requestParameters['entityAllocationBulkPayload']
        )
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EntityAllocationCollectionFromJSON(jsonValue)
    );
  }

  /** Create multiple allocations */
  async createMultipleAllocations(
    requestParameters: CreateMultipleAllocationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<EntityAllocationCollection> {
    const response = await this.createMultipleAllocationsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Delete allocation */
  async deleteAllocationRaw(
    requestParameters: DeleteAllocationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['allocation'] == null) {
      throw new runtime.RequiredError(
        'allocation',
        'Required parameter "allocation" was null or undefined when calling deleteAllocation().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v2/datasources/allocations/{allocation}`.replace(
          `{${'allocation'}}`,
          encodeURIComponent(String(requestParameters['allocation']))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /** Delete allocation */
  async deleteAllocation(
    requestParameters: DeleteAllocationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteAllocationRaw(requestParameters, initOverrides);
  }

  /** Show allocation */
  async showAllocationRaw(
    requestParameters: ShowAllocationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<EntityAllocation>> {
    if (requestParameters['allocation'] == null) {
      throw new runtime.RequiredError(
        'allocation',
        'Required parameter "allocation" was null or undefined when calling showAllocation().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v2/datasources/allocations/{allocation}`.replace(
          `{${'allocation'}}`,
          encodeURIComponent(String(requestParameters['allocation']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EntityAllocationFromJSON(jsonValue)
    );
  }

  /** Show allocation */
  async showAllocation(
    requestParameters: ShowAllocationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<EntityAllocation> {
    const response = await this.showAllocationRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Show multiple allocations */
  async showMultipleAllocationsRaw(
    requestParameters: ShowMultipleAllocationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<EntityAllocationCollection>> {
    const queryParameters: any = {};

    if (requestParameters['ids'] != null) {
      queryParameters['ids'] = requestParameters['ids'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v2/datasources/allocations/multiple`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EntityAllocationCollectionFromJSON(jsonValue)
    );
  }

  /** Show multiple allocations */
  async showMultipleAllocations(
    requestParameters: ShowMultipleAllocationsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<EntityAllocationCollection> {
    const response = await this.showMultipleAllocationsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Update allocation (deprecated) */
  async updateAllocationRaw(
    requestParameters: UpdateAllocationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<EntityAllocation>> {
    if (requestParameters['allocation'] == null) {
      throw new runtime.RequiredError(
        'allocation',
        'Required parameter "allocation" was null or undefined when calling updateAllocation().'
      );
    }

    if (requestParameters['entityAllocationPayload'] == null) {
      throw new runtime.RequiredError(
        'entityAllocationPayload',
        'Required parameter "entityAllocationPayload" was null or undefined when calling updateAllocation().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/v2/datasources/allocations/{allocation}`.replace(
          `{${'allocation'}}`,
          encodeURIComponent(String(requestParameters['allocation']))
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: EntityAllocationPayloadToJSON(
          requestParameters['entityAllocationPayload']
        )
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EntityAllocationFromJSON(jsonValue)
    );
  }

  /** Update allocation (deprecated) */
  async updateAllocation(
    requestParameters: UpdateAllocationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<EntityAllocation> {
    const response = await this.updateAllocationRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Update multiple allocations */
  async updateMultipleAllocationsRaw(
    requestParameters: UpdateMultipleAllocationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<EntityAllocationCollection>> {
    if (requestParameters['entityAllocationUpdateBulkPayload'] == null) {
      throw new runtime.RequiredError(
        'entityAllocationUpdateBulkPayload',
        'Required parameter "entityAllocationUpdateBulkPayload" was null or undefined when calling updateMultipleAllocations().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/v2/datasources/allocations/multiple`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: EntityAllocationUpdateBulkPayloadToJSON(
          requestParameters['entityAllocationUpdateBulkPayload']
        )
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EntityAllocationCollectionFromJSON(jsonValue)
    );
  }

  /** Update multiple allocations */
  async updateMultipleAllocations(
    requestParameters: UpdateMultipleAllocationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<EntityAllocationCollection> {
    const response = await this.updateMultipleAllocationsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
