/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import * as runtime from '../runtime';
import type {
  FollowUpEntryCollection,
  FollowUpEntryInput,
  FollowUpEntryResource
} from '../models/index';
import {
  FollowUpEntryCollectionFromJSON,
  FollowUpEntryCollectionToJSON,
  FollowUpEntryInputFromJSON,
  FollowUpEntryInputToJSON,
  FollowUpEntryResourceFromJSON,
  FollowUpEntryResourceToJSON
} from '../models/index';

export interface CreateFollowUpEntryRequest {
  followUp: number;
  followUpEntryInput: FollowUpEntryInput;
}

export interface DeleteFollowUpEntryRequest {
  entry: number;
}

export interface ListFollowUpEntriesRequest {
  followUp: number;
  page?: number;
  perPage?: number;
}

export interface ShowFollowUpEntryRequest {
  entry: number;
}

export interface UpdateFollowUpEntryRequest {
  entry: number;
  followUpEntryInput: FollowUpEntryInput;
}

export class FollowUpEntriesApi extends runtime.BaseAPI {
  /** Store a newly created resource in storage. Create follow-up entry */
  async createFollowUpEntryRaw(
    requestParameters: CreateFollowUpEntryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<FollowUpEntryResource>> {
    if (requestParameters['followUp'] == null) {
      throw new runtime.RequiredError(
        'followUp',
        'Required parameter "followUp" was null or undefined when calling createFollowUpEntry().'
      );
    }

    if (requestParameters['followUpEntryInput'] == null) {
      throw new runtime.RequiredError(
        'followUpEntryInput',
        'Required parameter "followUpEntryInput" was null or undefined when calling createFollowUpEntry().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    let urlPath = `/v2/follow-ups/{followUp}/entries`;
    urlPath = urlPath.replace(
      `{${'followUp'}}`,
      encodeURIComponent(String(requestParameters['followUp']))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: FollowUpEntryInputToJSON(requestParameters['followUpEntryInput'])
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      FollowUpEntryResourceFromJSON(jsonValue)
    );
  }

  /** Store a newly created resource in storage. Create follow-up entry */
  async createFollowUpEntry(
    requestParameters: CreateFollowUpEntryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<FollowUpEntryResource> {
    const response = await this.createFollowUpEntryRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Remove the specified resource from storage. Delete follow-up entry */
  async deleteFollowUpEntryRaw(
    requestParameters: DeleteFollowUpEntryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['entry'] == null) {
      throw new runtime.RequiredError(
        'entry',
        'Required parameter "entry" was null or undefined when calling deleteFollowUpEntry().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    let urlPath = `/v2/entries/{entry}`;
    urlPath = urlPath.replace(
      `{${'entry'}}`,
      encodeURIComponent(String(requestParameters['entry']))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /** Remove the specified resource from storage. Delete follow-up entry */
  async deleteFollowUpEntry(
    requestParameters: DeleteFollowUpEntryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteFollowUpEntryRaw(requestParameters, initOverrides);
  }

  /** Display a listing of the resource. List follow-up entries (paginated) */
  async listFollowUpEntriesRaw(
    requestParameters: ListFollowUpEntriesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<FollowUpEntryCollection>> {
    if (requestParameters['followUp'] == null) {
      throw new runtime.RequiredError(
        'followUp',
        'Required parameter "followUp" was null or undefined when calling listFollowUpEntries().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page'];
    }

    if (requestParameters['perPage'] != null) {
      queryParameters['per_page'] = requestParameters['perPage'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    let urlPath = `/v2/follow-ups/{followUp}/entries`;
    urlPath = urlPath.replace(
      `{${'followUp'}}`,
      encodeURIComponent(String(requestParameters['followUp']))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      FollowUpEntryCollectionFromJSON(jsonValue)
    );
  }

  /** Display a listing of the resource. List follow-up entries (paginated) */
  async listFollowUpEntries(
    requestParameters: ListFollowUpEntriesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<FollowUpEntryCollection> {
    const response = await this.listFollowUpEntriesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Display the specified resource. Show follow-up entry */
  async showFollowUpEntryRaw(
    requestParameters: ShowFollowUpEntryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<FollowUpEntryResource>> {
    if (requestParameters['entry'] == null) {
      throw new runtime.RequiredError(
        'entry',
        'Required parameter "entry" was null or undefined when calling showFollowUpEntry().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    let urlPath = `/v2/entries/{entry}`;
    urlPath = urlPath.replace(
      `{${'entry'}}`,
      encodeURIComponent(String(requestParameters['entry']))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      FollowUpEntryResourceFromJSON(jsonValue)
    );
  }

  /** Display the specified resource. Show follow-up entry */
  async showFollowUpEntry(
    requestParameters: ShowFollowUpEntryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<FollowUpEntryResource> {
    const response = await this.showFollowUpEntryRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Update the specified resource in storage. Update follow-up entry */
  async updateFollowUpEntryRaw(
    requestParameters: UpdateFollowUpEntryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<FollowUpEntryResource>> {
    if (requestParameters['entry'] == null) {
      throw new runtime.RequiredError(
        'entry',
        'Required parameter "entry" was null or undefined when calling updateFollowUpEntry().'
      );
    }

    if (requestParameters['followUpEntryInput'] == null) {
      throw new runtime.RequiredError(
        'followUpEntryInput',
        'Required parameter "followUpEntryInput" was null or undefined when calling updateFollowUpEntry().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    let urlPath = `/v2/entries/{entry}`;
    urlPath = urlPath.replace(
      `{${'entry'}}`,
      encodeURIComponent(String(requestParameters['entry']))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: FollowUpEntryInputToJSON(requestParameters['followUpEntryInput'])
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      FollowUpEntryResourceFromJSON(jsonValue)
    );
  }

  /** Update the specified resource in storage. Update follow-up entry */
  async updateFollowUpEntry(
    requestParameters: UpdateFollowUpEntryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<FollowUpEntryResource> {
    const response = await this.updateFollowUpEntryRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
