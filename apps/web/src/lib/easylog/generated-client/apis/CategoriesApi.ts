/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import * as runtime from '../runtime';
import type {
  CategoryCollection,
  CategoryResource,
  FormCollection,
  StoreCategoryInput,
  UpdateCategoryInput
} from '../models/index';
import {
  CategoryCollectionFromJSON,
  CategoryCollectionToJSON,
  CategoryResourceFromJSON,
  CategoryResourceToJSON,
  FormCollectionFromJSON,
  FormCollectionToJSON,
  StoreCategoryInputFromJSON,
  StoreCategoryInputToJSON,
  UpdateCategoryInputFromJSON,
  UpdateCategoryInputToJSON
} from '../models/index';

export interface CreateCategoryRequest {
  storeCategoryInput: StoreCategoryInput;
}

export interface DeleteCategoryRequest {
  category: number;
}

export interface ListCategoriesRequest {
  page?: number;
  perPage?: number;
}

export interface ListCategoryFormsRequest {
  category: number;
}

export interface ShowCategoryRequest {
  category: number;
}

export interface UpdateCategoryRequest {
  category: number;
  updateCategoryInput: UpdateCategoryInput;
}

export class CategoriesApi extends runtime.BaseAPI {
  /** Store a newly created resource in storage. Create category */
  async createCategoryRaw(
    requestParameters: CreateCategoryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CategoryResource>> {
    if (requestParameters['storeCategoryInput'] == null) {
      throw new runtime.RequiredError(
        'storeCategoryInput',
        'Required parameter "storeCategoryInput" was null or undefined when calling createCategory().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    let urlPath = `/v2/categories`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: StoreCategoryInputToJSON(requestParameters['storeCategoryInput'])
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CategoryResourceFromJSON(jsonValue)
    );
  }

  /** Store a newly created resource in storage. Create category */
  async createCategory(
    requestParameters: CreateCategoryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CategoryResource> {
    const response = await this.createCategoryRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Remove the specified resource from storage. Delete category */
  async deleteCategoryRaw(
    requestParameters: DeleteCategoryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['category'] == null) {
      throw new runtime.RequiredError(
        'category',
        'Required parameter "category" was null or undefined when calling deleteCategory().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    let urlPath = `/v2/categories/{category}`;
    urlPath = urlPath.replace(
      `{${'category'}}`,
      encodeURIComponent(String(requestParameters['category']))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /** Remove the specified resource from storage. Delete category */
  async deleteCategory(
    requestParameters: DeleteCategoryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteCategoryRaw(requestParameters, initOverrides);
  }

  /** Display a listing of the resource. List categories (paginated) */
  async listCategoriesRaw(
    requestParameters: ListCategoriesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CategoryCollection>> {
    const queryParameters: any = {};

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page'];
    }

    if (requestParameters['perPage'] != null) {
      queryParameters['per_page'] = requestParameters['perPage'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    let urlPath = `/v2/categories`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CategoryCollectionFromJSON(jsonValue)
    );
  }

  /** Display a listing of the resource. List categories (paginated) */
  async listCategories(
    requestParameters: ListCategoriesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CategoryCollection> {
    const response = await this.listCategoriesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** List forms in a category. List forms in a category */
  async listCategoryFormsRaw(
    requestParameters: ListCategoryFormsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<FormCollection>> {
    if (requestParameters['category'] == null) {
      throw new runtime.RequiredError(
        'category',
        'Required parameter "category" was null or undefined when calling listCategoryForms().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    let urlPath = `/v2/categories/{category}/forms`;
    urlPath = urlPath.replace(
      `{${'category'}}`,
      encodeURIComponent(String(requestParameters['category']))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      FormCollectionFromJSON(jsonValue)
    );
  }

  /** List forms in a category. List forms in a category */
  async listCategoryForms(
    requestParameters: ListCategoryFormsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<FormCollection> {
    const response = await this.listCategoryFormsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Display the specified resource. Show category */
  async showCategoryRaw(
    requestParameters: ShowCategoryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CategoryResource>> {
    if (requestParameters['category'] == null) {
      throw new runtime.RequiredError(
        'category',
        'Required parameter "category" was null or undefined when calling showCategory().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    let urlPath = `/v2/categories/{category}`;
    urlPath = urlPath.replace(
      `{${'category'}}`,
      encodeURIComponent(String(requestParameters['category']))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CategoryResourceFromJSON(jsonValue)
    );
  }

  /** Display the specified resource. Show category */
  async showCategory(
    requestParameters: ShowCategoryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CategoryResource> {
    const response = await this.showCategoryRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Update the specified resource in storage. Update category */
  async updateCategoryRaw(
    requestParameters: UpdateCategoryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CategoryResource>> {
    if (requestParameters['category'] == null) {
      throw new runtime.RequiredError(
        'category',
        'Required parameter "category" was null or undefined when calling updateCategory().'
      );
    }

    if (requestParameters['updateCategoryInput'] == null) {
      throw new runtime.RequiredError(
        'updateCategoryInput',
        'Required parameter "updateCategoryInput" was null or undefined when calling updateCategory().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    let urlPath = `/v2/categories/{category}`;
    urlPath = urlPath.replace(
      `{${'category'}}`,
      encodeURIComponent(String(requestParameters['category']))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateCategoryInputToJSON(
          requestParameters['updateCategoryInput']
        )
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CategoryResourceFromJSON(jsonValue)
    );
  }

  /** Update the specified resource in storage. Update category */
  async updateCategory(
    requestParameters: UpdateCategoryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CategoryResource> {
    const response = await this.updateCategoryRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
