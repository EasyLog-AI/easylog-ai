/* tslint:disable */
/* eslint-disable */
/**
 * EasyLog API Programmatic access to EasyLog REST endpoints
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import * as runtime from '../runtime';
import type {
  FollowUpCollection,
  FollowUpResource,
  StoreFollowUpInput,
  UpdateFollowUpInput
} from '../models/index';
import {
  FollowUpCollectionFromJSON,
  FollowUpCollectionToJSON,
  FollowUpResourceFromJSON,
  FollowUpResourceToJSON,
  StoreFollowUpInputFromJSON,
  StoreFollowUpInputToJSON,
  UpdateFollowUpInputFromJSON,
  UpdateFollowUpInputToJSON
} from '../models/index';

export interface CreateFollowUpRequest {
  storeFollowUpInput: StoreFollowUpInput;
}

export interface DeleteFollowUpRequest {
  followUp: number;
}

export interface ListFollowUpsRequest {
  page?: number;
  perPage?: number;
}

export interface ShowFollowUpRequest {
  followUp: number;
}

export interface UpdateFollowUpRequest {
  followUp: number;
  updateFollowUpInput: UpdateFollowUpInput;
}

export class FollowUpsApi extends runtime.BaseAPI {
  /** Store a newly created resource in storage. Create follow-up */
  async createFollowUpRaw(
    requestParameters: CreateFollowUpRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<FollowUpResource>> {
    if (requestParameters['storeFollowUpInput'] == null) {
      throw new runtime.RequiredError(
        'storeFollowUpInput',
        'Required parameter "storeFollowUpInput" was null or undefined when calling createFollowUp().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    const response = await this.request(
      {
        path: `/v2/follow-ups`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: StoreFollowUpInputToJSON(requestParameters['storeFollowUpInput'])
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      FollowUpResourceFromJSON(jsonValue)
    );
  }

  /** Store a newly created resource in storage. Create follow-up */
  async createFollowUp(
    requestParameters: CreateFollowUpRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<FollowUpResource> {
    const response = await this.createFollowUpRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Remove the specified resource from storage. Delete follow-up */
  async deleteFollowUpRaw(
    requestParameters: DeleteFollowUpRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['followUp'] == null) {
      throw new runtime.RequiredError(
        'followUp',
        'Required parameter "followUp" was null or undefined when calling deleteFollowUp().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    const response = await this.request(
      {
        path: `/v2/follow-ups/{followUp}`.replace(
          `{${'followUp'}}`,
          encodeURIComponent(String(requestParameters['followUp']))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /** Remove the specified resource from storage. Delete follow-up */
  async deleteFollowUp(
    requestParameters: DeleteFollowUpRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteFollowUpRaw(requestParameters, initOverrides);
  }

  /**
   * List all follow-ups for the current client. Follow-ups are filtered by
   * user group membership unless the user has the FollowUpOverrideGroups
   * permission. Users will only see follow-ups that are either assigned to
   * their groups or have no group assignment (ungrouped). List follow-ups
   * (paginated)
   */
  async listFollowUpsRaw(
    requestParameters: ListFollowUpsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<FollowUpCollection>> {
    const queryParameters: any = {};

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page'];
    }

    if (requestParameters['perPage'] != null) {
      queryParameters['per_page'] = requestParameters['perPage'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    const response = await this.request(
      {
        path: `/v2/follow-ups`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      FollowUpCollectionFromJSON(jsonValue)
    );
  }

  /**
   * List all follow-ups for the current client. Follow-ups are filtered by
   * user group membership unless the user has the FollowUpOverrideGroups
   * permission. Users will only see follow-ups that are either assigned to
   * their groups or have no group assignment (ungrouped). List follow-ups
   * (paginated)
   */
  async listFollowUps(
    requestParameters: ListFollowUpsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<FollowUpCollection> {
    const response = await this.listFollowUpsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Display the specified resource. Show follow-up */
  async showFollowUpRaw(
    requestParameters: ShowFollowUpRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<FollowUpResource>> {
    if (requestParameters['followUp'] == null) {
      throw new runtime.RequiredError(
        'followUp',
        'Required parameter "followUp" was null or undefined when calling showFollowUp().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    const response = await this.request(
      {
        path: `/v2/follow-ups/{followUp}`.replace(
          `{${'followUp'}}`,
          encodeURIComponent(String(requestParameters['followUp']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      FollowUpResourceFromJSON(jsonValue)
    );
  }

  /** Display the specified resource. Show follow-up */
  async showFollowUp(
    requestParameters: ShowFollowUpRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<FollowUpResource> {
    const response = await this.showFollowUpRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Update the specified resource in storage. Update follow-up */
  async updateFollowUpRaw(
    requestParameters: UpdateFollowUpRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<FollowUpResource>> {
    if (requestParameters['followUp'] == null) {
      throw new runtime.RequiredError(
        'followUp',
        'Required parameter "followUp" was null or undefined when calling updateFollowUp().'
      );
    }

    if (requestParameters['updateFollowUpInput'] == null) {
      throw new runtime.RequiredError(
        'updateFollowUpInput',
        'Required parameter "updateFollowUpInput" was null or undefined when calling updateFollowUp().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'passport',
        []
      );
    }

    const response = await this.request(
      {
        path: `/v2/follow-ups/{followUp}`.replace(
          `{${'followUp'}}`,
          encodeURIComponent(String(requestParameters['followUp']))
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateFollowUpInputToJSON(
          requestParameters['updateFollowUpInput']
        )
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      FollowUpResourceFromJSON(jsonValue)
    );
  }

  /** Update the specified resource in storage. Update follow-up */
  async updateFollowUp(
    requestParameters: UpdateFollowUpRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<FollowUpResource> {
    const response = await this.updateFollowUpRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
