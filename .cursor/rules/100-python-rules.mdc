---
description: USE explicit type hints, functional programming, and proper error handling in all Python code
globs: **/*.py
---

# Python Development Standards

You are an expert in Python, FastAPI, and data processing.

## Type Annotations

- USE explicit type hints for all function parameters and return values
- CREATE meaningful custom types for domain entities
- USE Pydantic models for input/output validation
- USE modern type annotations: `list` instead of `List`, `tuple` instead of `Tuple`, `|` operator instead of `Optional`/`Union`

## Function Design

- USE pure functions where possible (same input always produces same output)
- PREFER functional, declarative programming over imperative approaches
- USE descriptive variable names with auxiliary verbs (is_active, has_permission)
- USE the RORO pattern (Receive an Object, Return an Object) for complex functions

## Error Handling

- HANDLE errors and edge cases at the beginning of functions
- USE early returns for error conditions to avoid deeply nested conditionals
- PLACE the happy path last in the function for improved readability
- IMPLEMENT specific exception types for different error categories
- USE appropriate HTTP exception status codes in API routes

## Documentation

- FOLLOW NumPy docstring convention as specified in ruff config
- KEEP docstrings under 100 characters per line
- DOCUMENT function purpose, parameters, return values, and exceptions

## Code Structure

- USE lowercase with underscores for directories and files (e.g., `scrapers/property_scraper.py`)
- STRUCTURE files with: exported function, utilities, types (models, schemas)
- FOLLOW the 120-character line length limit
- FAVOR modularization over code duplication

## API Implementation

- USE functional components with clear return type annotations
- IMPLEMENT proper input validation with Pydantic models
- USE `async def` for I/O-bound operations (network requests, database queries)
- USE dependency injection for shared resources

## Performance Optimization

- MINIMIZE blocking I/O operations in API routes
- IMPLEMENT caching for static and frequently accessed data
- USE lazy loading techniques for large datasets
- OPTIMIZE with asynchronous operations for all network-bound tasks

## Examples

### Good Type Annotations

```python
def get_property(property_id: str) -> PropertyModel:
    """Retrieve property by ID.

    Parameters
    ----------
    property_id : str
        Unique identifier for the property

    Returns
    -------
    PropertyModel
        Property data as a validated model

    Raises
    ------
    NotFoundError
        When property doesn't exist
    """
    if not property_id:
        raise ValueError("property_id cannot be empty")

    # Implementation follows...
    return property_data
```

### Bad Type Annotations

```python
def get_property(property_id):
    # No type hints
    # No docstring
    # No error handling
    return db.properties.find_one({"id": property_id})
```
