---
description: USE React.PropsWithChildren for component props typing and AVOID React.FC to ensure proper children typing
globs: **/*.{tsx,jsx}
---

# React Component Props Typing

## Context

When defining React components that accept children, proper typing ensures type safety and better developer experience.

## Requirements

- ALWAYS use `React.PropsWithChildren<Props>` for components that accept children
- NEVER use `React.FC<Props>` or `React.FunctionComponent<Props>` for component typing

## Examples

### ✅ Correct Usage

```tsx
interface ButtonProps {
  onClick?: () => void;
  variant?: 'primary' | 'secondary';
}

const Button = ({
  onClick,
  variant = 'primary',
  children
}: React.PropsWithChildren<ButtonProps>) => {
  return (
    <button onClick={onClick} className={`btn-${variant}`}>
      {children}
    </button>
  );
};
```

### ❌ Incorrect Usage

```tsx
interface ButtonProps {
  onClick?: () => void;
  variant?: 'primary' | 'secondary';
  children?: React.ReactNode;
}

const Button: React.FC<ButtonProps> = ({
  onClick,
  variant = 'primary',
  children
}) => {
  return (
    <button onClick={onClick} className={`btn-${variant}`}>
      {children}
    </button>
  );
};
```
